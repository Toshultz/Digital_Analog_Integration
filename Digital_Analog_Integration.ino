
/*
  SD card datalogger
 
  connect to ISP pins on Due. 
  chipSelect = 4
    
 */
//


///////////////////////////Analog constants////////////////
//typedef enum _bool {false = 0, true } bool;    /* Undefined size */
typedef unsigned long           DWORD;                          /* 32-bit unsigned */
typedef unsigned char           BYTE;                           /* 8-bit unsigned  */
typedef unsigned short int      WORD;
//Define Input



int mr_cal = 0;
int MUX_C1 = 42;
int MUX_B1 = 43;
int PAENABLE = 33;
int MOTOR_CONTROL = 34;
int PA_switch = 37;
int FS_GMR1 = 38;
int FS_Coil = 39;
int AUTOGAINA3 = 40;
int AUTOGAINA2 = 41;

int ADC_SCK = 50;
int BUSY = 48;
int CNV = 47;
int ADC_SDI = 51;

//int ADC_SDO = 49;
//int B_CONVST = 46;

int MUX_A0 = 45;
int MUX_B0 = 36;
int MUX_C0 = 28;
int MUX_D0 = 14;

int MUX_A1 = 15;
int AUTOGAINA0 = 29;
int AUTOGAINA1 = 11;
int SCLK_SIGSYN = 12;
int SDO_SIGSYN = 30;

//double resistorarray[16] = {1300, 1315, 1345,1370,1400,1430,1460,1490,1515, 1545,1575,1605,1635, 1665,1695,1725};
double resistorarray[16] = {1500, 1515, 1530, 1545, 1560, 1575, 1591, 1605, 1620, 1635, 1650, 1665, 1680, 1695, 1711, 1725};

double AMP1[80];
double sidedata = 0;
double carrierdata = 0;
double correctedsidedata = 0;
double correctedmr = 0;
double sidemul2 = 0;
double sidemul = 0;
double carriermul = 0;

double temp = 0;
long dummy = 0;
char dummy_a = 0;
long dummy_data = 0;

short two_byte_short = 0;


int carrierfrequency = 155;//541;//227;//280; //297;//158;//102;//122;//150: 153;//115;//217;//110;//147;//67;//170;//113;//61;//158;//282;
int sidefrequency = 115;//361;//422;//489;//251;//161;//220;//150:210;//72;//173;//177;//97;//156;//155;//107;//266;//89;
int sidefrequency2 = 197;//41;// 676;//93;//

int freq_bin = 20;//15
int side_bin1 = 20;//30
int side_bin2 = 20;//25;

//363:34
int tempcarrierfrequency = 323;
int tempsidefrequency = 333;
int tempsidefrequency2 = 333;
double mrmedian = 670;//770;//840;//285;//685;//2100;//2800;//3106;//1263;//27000;
byte table[80];

float FTvl[2048 * 2];
double mr_factor[80];

long AVal[2048 * 2];
int Nvl = 2048 * 2;
int Nft = 2048 * 2;

float hann[4096] = {0,9.61234245958253e-07,3.84493472104014e-06,8.65109463605109e-06,1.53797026763921e-05,2.40307430009719e-05,3.46041952433853e-05,4.71000345110069e-05,6.15182313854441e-05,7.78587519228999e-05,9.61215576537197e-05,0.000116306605582663,0.000138413848189357,0.000162443233427661,0.000188394704726758,0.000216268200990331,0.000246063656597298,0.000277781001401895,0.000311420160733680,0.000346981055397804,0.000384463601675191,0.000423867711322722,0.000465193291573322,0.000508440245136418,0.000553608470198207,0.000600697860421385,0.000649708304946056,0.000700639688389546,0.000753491890846861,0.000808264787890957,0.000864958250572829,0.000923572145422241,0.000984106334447628,0.00104656067513665,0.00111093502045636,0.00117722921885376,0.00124544311425589,0.00131557654607064,0.00138762934918665,0.00146160135397370,0.00153749238628368,0.00161530226745033,0.00169503081429014,0.00177667783910237,0.00186024314967001,0.00194572654925956,0.00203312783662225,0.00212244680599386,0.00221368324709560,0.00230683694513448,0.00240190768080363,0.00249889523028330,0.00259779936524082,0.00269861985283165,0.00280135645569953,0.00290600893197719,0.00301257703528694,0.00312106051474126,0.00323145911494347,0.00334377257598789,0.00345800063346119,0.00357414301844235,0.00369219945750366,0.00381216967271119,0.00393405338162551,0.00405785029730248,0.00418356012829367,0.00431118257864708,0.00444071734790828,0.00457216413112043,0.00470552261882560,0.00484079249706491,0.00497797344737987,0.00511706514681283,0.00525806726790768,0.00540097947871083,0.00554580144277157,0.00569253281914353,0.00584117326238493,0.00599172242255960,0.00614417994523779,0.00629854547149697,0.00645481863792276,0.00661299907660965,0.00677308641516190,0.00693508027669470,0.00709898027983449,0.00726478603872046,0.00743249716300502,0.00760211325785488,0.00777363392395215,0.00794705875749488,0.00812238735019849,0.00829961928929616,0.00847875415754037,0.00865979153320360,0.00884273099007945,0.00902757209748325,0.00921431442025361,0.00940295751875315,0.00959350094886975,0.00978594426201714,0.00998028700513656,0.0101765287206973,0.0103746689466980,0.0105747072166681,0.0107766430596680,0.0109804760002912,0.0111862055586648,0.0113938312504509,0.0116033525868474,0.0118147690745896,0.0120280802159511,0.0122432855087450,0.0124603844463251,0.0126793765175869,0.0129002612069696,0.0131230379944559,0.0133477063555747,0.0135742657614014,0.0138027156785593,0.0140330555692211,0.0142652848911102,0.0144994030975016,0.0147354096372232,0.0149733039546579,0.0152130854897437,0.0154547536779760,0.0156983079504085,0.0159437477336544,0.0161910724498882,0.0164402815168466,0.0166913743478300,0.0169443503517045,0.0171992089329020,0.0174559494914228,0.0177145714228365,0.0179750741182836,0.0182374569644764,0.0185017193437013,0.0187678606338197,0.0190358802082694,0.0193057774360664,0.0195775516818064,0.0198512023056658,0.0201267286634037,0.0204041301063635,0.0206834059814737,0.0209645556312503,0.0212475783937980,0.0215324736028114,0.0218192405875771,0.0221078786729752,0.0223983871794805,0.0226907654231647,0.0229850127156973,0.0232811283643481,0.0235791116719875,0.0238789619370900,0.0241806784537341,0.0244842605116048,0.0247897073959955,0.0250970183878089,0.0254061927635594,0.0257172297953744,0.0260301287509964,0.0263448888937842,0.0266615094827148,0.0269799897723857,0.0273003290130159,0.0276225264504479,0.0279465813261498,0.0282724928772168,0.0286002603363727,0.0289298829319724,0.0292613598880031,0.0295946904240868,0.0299298737554812,0.0302669090930823,0.0306057956434261,0.0309465326086901,0.0312891191866959,0.0316335545709104,0.0319798379504478,0.0323279685100720,0.0326779454301979,0.0330297678868938,0.0333834350518831,0.0337389460925464,0.0340963001719231,0.0344554964487139,0.0348165340772823,0.0351794122076569,0.0355441299855334,0.0359106865522765,0.0362790810449217,0.0366493125961779,0.0370213803344289,0.0373952833837357,0.0377710208638384,0.0381485918901588,0.0385279955738017,0.0389092310215576,0.0392922973359043,0.0396771936150097,0.0400639189527329,0.0404524724386278,0.0408428531579436,0.0412350601916281,0.0416290926163295,0.0420249495043986,0.0424226299238907,0.0428221329385686,0.0432234576079036,0.0436266029870790,0.0440315681269911,0.0444383520742526,0.0448469538711939,0.0452573725558659,0.0456696071620421,0.0460836567192208,0.0464995202526274,0.0469171967832168,0.0473366853276760,0.0477579848984256,0.0481810945036226,0.0486060131471631,0.0490327398286841,0.0494612735435661,0.0498916132829351,0.0503237580336656,0.0507577067783825,0.0511934584954639,0.0516310121590428,0.0520703667390104,0.0525115212010179,0.0529544745064792,0.0533992256125733,0.0538457734722465,0.0542941170342155,0.0547442552429693,0.0551961870387716,0.0556499113576639,0.0561054271314677,0.0565627332877865,0.0570218287500093,0.0574827124373125,0.0579453832646624,0.0584098401428181,0.0588760819783339,0.0593441076735618,0.0598139161266542,0.0602855062315664,0.0607588768780593,0.0612340269517020,0.0617109553338742,0.0621896609017694,0.0626701425283968,0.0631523990825844,0.0636364294289816,0.0641222324280622,0.0646098069361262,0.0650991518053033,0.0655902658835553,0.0660831480146788,0.0665777970383082,0.0670742117899179,0.0675723911008253,0.0680723337981941,0.0685740387050360,0.0690775046402143,0.0695827304184462,0.0700897148503061,0.0705984567422279,0.0711089548965080,0.0716212081113082,0.0721352151806585,0.0726509748944595,0.0731684860384863,0.0736877473943904,0.0742087577397026,0.0747315158478365,0.0752560204880908,0.0757822704256527,0.0763102644216004,0.0768400012329060,0.0773714796124389,0.0779046983089682,0.0784396560671658,0.0789763516276098,0.0795147837267867,0.0800549510970948,0.0805968524668473,0.0811404865602751,0.0816858520975298,0.0822329477946867,0.0827817723637482,0.0833323245126460,0.0838846029452448,0.0844386063613457,0.0849943334566882,0.0855517829229539,0.0861109534477698,0.0866718437147108,0.0872344524033033,0.0877987781890281,0.0883648197433234,0.0889325757335881,0.0895020448231852,0.0900732256714440,0.0906461169336646,0.0912207172611198,0.0917970253010593,0.0923750396967121,0.0929547590872900,0.0935361821079912,0.0941193073900028,0.0947041335605043,0.0952906592426712,0.0958788830556777,0.0964688036147002,0.0970604195309207,0.0976537294115297,0.0982487318597298,0.0988454254747390,0.0994438088517936,0.100043880582152,0.100645639253098,0.101249083447943,0.101854211746031,0.102461022722742,0.103069514949493,0.103679686993744,0.104291537419000,0.104905064784813,0.105520267646791,0.106137144556594,0.106755694061941,0.107375914706616,0.107997805030467,0.108621363569410,0.109246588855435,0.109873479416609,0.110502033777077,0.111132250457066,0.111764127972893,0.112397664836961,0.113032859557770,0.113669710639914,0.114308216584090,0.114948375887098,0.115590187041844,0.116233648537349,0.116878758858744,0.117525516487282,0.118173919900336,0.118823967571405,0.119475657970117,0.120128989562232,0.120783960809647,0.121440570170399,0.122098816098667,0.122758697044780,0.123420211455214,0.124083357772602,0.124748134435735,0.125414539879564,0.126082572535208,0.126752230829954,0.127423513187260,0.128096418026763,0.128770943764279,0.129447088811810,0.130124851577543,0.130804230465858,0.131485223877330,0.132167830208733,0.132852047853043,0.133537875199445,0.134225310633332,0.134914352536311,0.135604999286209,0.136297249257073,0.136991100819176,0.137686552339022,0.138383602179346,0.139082248699122,0.139782490253563,0.140484325194129,0.141187751868528,0.141892768620721,0.142599373790924,0.143307565715615,0.144017342727536,0.144728703155697,0.145441645325381,0.146156167558148,0.146872268171834,0.147589945480565,0.148309197794750,0.149030023421093,0.149752420662593,0.150476387818549,0.151201923184565,0.151929025052551,0.152657691710731,0.153387921443645,0.154119712532152,0.154853063253435,0.155587971881008,0.156324436684713,0.157062455930733,0.157802027881587,0.158543150796142,0.159285822929612,0.160030042533564,0.160775807855923,0.161523117140972,0.162271968629363,0.163022360558114,0.163774291160618,0.164527758666647,0.165282761302351,0.166039297290269,0.166797364849330,0.167556962194855,0.168318087538566,0.169080739088586,0.169844915049447,0.170610613622089,0.171377833003870,0.172146571388567,0.172916826966381,0.173688597923940,0.174461882444306,0.175236678706977,0.176012984887892,0.176790799159436,0.177570119690441,0.178350944646196,0.179133272188446,0.179917100475401,0.180702427661736,0.181489251898597,0.182277571333607,0.183067384110867,0.183858688370964,0.184651482250974,0.185445763884464,0.186241531401500,0.187038782928649,0.187837516588986,0.188637730502095,0.189439422784075,0.190242591547545,0.191047234901650,0.191853350952060,0.192660937800979,0.193469993547151,0.194280516285858,0.195092504108931,0.195905955104750,0.196720867358252,0.197537238950933,0.198355067960853,0.199174352462642,0.199995090527502,0.200817280223215,0.201640919614143,0.202466006761236,0.203292539722037,0.204120516550684,0.204949935297915,0.205780794011075,0.206613090734118,0.207446823507612,0.208281990368746,0.209118589351331,0.209956618485809,0.210796075799250,0.211636959315368,0.212479267054515,0.213322997033692,0.214168147266551,0.215014715763399,0.215862700531207,0.216712099573610,0.217562910890914,0.218415132480099,0.219268762334827,0.220123798445442,0.220980238798979,0.221838081379167,0.222697324166434,0.223557965137911,0.224420002267436,0.225283433525563,0.226148256879562,0.227014470293427,0.227882071727877,0.228751059140365,0.229621430485082,0.230493183712959,0.231366316771674,0.232240827605658,0.233116714156098,0.233993974360939,0.234872606154897,0.235752607469455,0.236633976232875,0.237516710370197,0.238400807803249,0.239286266450646,0.240173084227803,0.241061259046931,0.241950788817048,0.242841671443983,0.243733904830379,0.244627486875699,0.245522415476232,0.246418688525094,0.247316303912238,0.248215259524458,0.249115553245391,0.250017182955523,0.250920146532197,0.251824441849615,0.252730066778842,0.253637019187815,0.254545296941344,0.255454897901121,0.256365819925721,0.257278060870609,0.258191618588147,0.259106490927593,0.260022675735115,0.260940170853787,0.261858974123600,0.262779083381465,0.263700496461219,0.264623211193629,0.265547225406397,0.266472536924167,0.267399143568527,0.268327043158017,0.269256233508134,0.270186712431336,0.271118477737045,0.272051527231657,0.272985858718544,0.273921469998060,0.274858358867545,0.275796523121334,0.276735960550756,0.277676668944144,0.278618646086841,0.279561889761199,0.280506397746591,0.281452167819413,0.282399197753089,0.283347485318079,0.284297028281880,0.285247824409034,0.286199871461133,0.287153167196825,0.288107709371816,0.289063495738880,0.290020524047860,0.290978792045677,0.291938297476331,0.292899038080911,0.293861011597598,0.294824215761668,0.295788648305502,0.296754306958590,0.297721189447532,0.298689293496050,0.299658616824988,0.300629157152322,0.301600912193160,0.302573879659752,0.303548057261493,0.304523442704929,0.305500033693764,0.306477827928861,0.307456823108253,0.308437016927145,0.309418407077918,0.310400991250139,0.311384767130563,0.312369732403140,0.313355884749018,0.314343221846554,0.315331741371313,0.316321440996076,0.317312318390847,0.318304371222856,0.319297597156569,0.320291993853685,0.321287558973152,0.322284290171163,0.323282185101169,0.324281241413878,0.325281456757268,0.326282828776584,0.327285355114351,0.328289033410376,0.329293861301751,0.330299836422867,0.331306956405409,0.332315218878370,0.333324621468051,0.334335161798071,0.335346837489369,0.336359646160211,0.337373585426198,0.338388652900266,0.339404846192696,0.340422162911121,0.341440600660526,0.342460157043258,0.343480829659030,0.344502616104929,0.345525513975417,0.346549520862342,0.347574634354939,0.348600852039839,0.349628171501073,0.350656590320078,0.351686106075703,0.352716716344216,0.353748418699306,0.354781210712091,0.355815089951126,0.356850053982405,0.357886100369366,0.358923226672903,0.359961430451366,0.361000709260566,0.362041060653785,0.363082482181782,0.364124971392793,0.365168525832543,0.366213143044246,0.367258820568619,0.368305555943878,0.369353346705750,0.370402190387480,0.371452084519830,0.372503026631091,0.373555014247088,0.374608044891183,0.375662116084282,0.376717225344843,0.377773370188879,0.378830548129965,0.379888756679245,0.380947993345434,0.382008255634830,0.383069541051313,0.384131847096358,0.385195171269035,0.386259511066016,0.387324863981584,0.388391227507636,0.389458599133691,0.390526976346892,0.391596356632017,0.392666737471482,0.393738116345347,0.394810490731323,0.395883858104776,0.396958215938736,0.398033561703900,0.399109892868639,0.400187206899005,0.401265501258737,0.402344773409263,0.403425020809712,0.404506240916915,0.405588431185415,0.406671589067469,0.407755712013058,0.408840797469889,0.409926842883403,0.411013845696784,0.412101803350959,0.413190713284608,0.414280572934169,0.415371379733845,0.416463131115607,0.417555824509206,0.418649457342170,0.419744027039821,0.420839531025272,0.421935966719436,0.423033331541034,0.424131622906601,0.425230838230486,0.426330974924868,0.427432030399755,0.428534002062989,0.429636887320260,0.430740683575104,0.431845388228912,0.432950998680939,0.434057512328306,0.435164926566007,0.436273238786917,0.437382446381796,0.438492546739297,0.439603537245969,0.440715415286269,0.441828178242563,0.442941823495131,0.444056348422179,0.445171750399842,0.446288026802189,0.447405175001230,0.448523192366925,0.449642076267184,0.450761824067881,0.451882433132853,0.453003900823910,0.454126224500843,0.455249401521425,0.456373429241421,0.457498305014593,0.458624026192708,0.459750590125540,0.460877994160881,0.462006235644544,0.463135311920372,0.464265220330241,0.465395958214068,0.466527522909820,0.467659911753513,0.468793122079227,0.469927151219105,0.471061996503364,0.472197655260298,0.473334124816288,0.474471402495805,0.475609485621417,0.476748371513798,0.477888057491728,0.479028540872107,0.480169818969957,0.481311889098429,0.482454748568807,0.483598394690521,0.484742824771145,0.485888036116409,0.487034026030206,0.488180791814591,0.489328330769797,0.490476640194235,0.491625717384501,0.492775559635386,0.493926164239878,0.495077528489170,0.496229649672668,0.497382525077995,0.498536151990999,0.499690527695759,0.500845649474590,0.502001514608051,0.503158120374951,0.504315464052356,0.505473542915594,0.506632354238263,0.507791895292236,0.508952163347667,0.510113155673001,0.511274869534976,0.512437302198631,0.513600450927315,0.514764312982689,0.515928885624735,0.517094166111763,0.518260151700416,0.519426839645678,0.520594227200877,0.521762311617696,0.522931090146178,0.524100560034730,0.525270718530132,0.526441562877544,0.527613090320509,0.528785298100964,0.529958183459243,0.531131743634087,0.532305975862645,0.533480877380485,0.534656445421602,0.535832677218418,0.537009570001795,0.538187121001037,0.539365327443899,0.540544186556594,0.541723695563798,0.542903851688656,0.544084652152790,0.545266094176306,0.546448174977798,0.547630891774358,0.548814241781578,0.549998222213563,0.551182830282931,0.552368063200823,0.553553918176909,0.554740392419395,0.555927483135029,0.557115187529107,0.558303502805481,0.559492426166565,0.560681954813340,0.561872085945363,0.563062816760773,0.564254144456297,0.565446066227256,0.566638579267573,0.567831680769778,0.569025367925019,0.570219637923061,0.571414487952300,0.572609915199763,0.573805916851122,0.575002490090694,0.576199632101452,0.577397340065029,0.578595611161725,0.579794442570516,0.580993831469057,0.582193775033693,0.583394270439461,0.584595314860098,0.585796905468053,0.586999039434483,0.588201713929271,0.589404926121025,0.590608673177087,0.591812952263541,0.593017760545217,0.594223095185701,0.595428953347337,0.596635332191240,0.597842228877297,0.599049640564176,0.600257564409333,0.601465997569018,0.602674937198282,0.603884380450985,0.605094324479798,0.606304766436216,0.607515703470561,0.608727132731990,0.609939051368500,0.611151456526935,0.612364345352998,0.613577714991248,0.614791562585114,0.616005885276902,0.617220680207797,0.618435944517873,0.619651675346098,0.620867869830344,0.622084525107389,0.623301638312927,0.624519206581575,0.625737227046877,0.626955696841314,0.628174613096308,0.629393972942230,0.630613773508407,0.631834011923128,0.633054685313653,0.634275790806216,0.635497325526034,0.636719286597313,0.637941671143258,0.639164476286073,0.640387699146976,0.641611336846197,0.642835386502994,0.644059845235652,0.645284710161494,0.646509978396887,0.647735647057248,0.648961713257052,0.650188174109836,0.651415026728211,0.652642268223864,0.653869895707566,0.655097906289180,0.656326297077667,0.657555065181093,0.658784207706636,0.660013721760592,0.661243604448382,0.662473852874560,0.663704464142819,0.664935435355996,0.666166763616084,0.667398446024231,0.668630479680755,0.669862861685146,0.671095589136074,0.672328659131393,0.673562068768155,0.674795815142610,0.676029895350215,0.677264306485642,0.678499045642783,0.679734109914759,0.680969496393924,0.682205202171876,0.683441224339457,0.684677559986770,0.685914206203174,0.687151160077301,0.688388418697058,0.689625979149631,0.690863838521502,0.692101993898442,0.693340442365531,0.694579181007156,0.695818206907022,0.697057517148156,0.698297108812918,0.699536978983004,0.700777124739454,0.702017543162660,0.703258231332373,0.704499186327707,0.705740405227149,0.706981885108563,0.708223623049202,0.709465616125709,0.710707861414126,0.711950355989902,0.713193096927899,0.714436081302400,0.715679306187114,0.716922768655183,0.718166465779191,0.719410394631169,0.720654552282603,0.721898935804438,0.723143542267092,0.724388368740452,0.725633412293892,0.726878669996274,0.728124138915953,0.729369816120791,0.730615698678155,0.731861783654933,0.733108068117534,0.734354549131897,0.735601223763500,0.736848089077363,0.738095142138060,0.739342380009721,0.740589799756040,0.741837398440285,0.743085173125301,0.744333120873521,0.745581238746968,0.746829523807265,0.748077973115643,0.749326583732945,0.750575352719633,0.751824277135800,0.753073354041169,0.754322580495106,0.755571953556626,0.756821470284395,0.758071127736745,0.759320922971675,0.760570853046859,0.761820915019653,0.763071105947106,0.764321422885960,0.765571862892661,0.766822423023366,0.768073100333948,0.769323891880006,0.770574794716869,0.771825805899604,0.773076922483022,0.774328141521687,0.775579460069923,0.776830875181817,0.778082383911230,0.779333983311803,0.780585670436964,0.781837442339931,0.783089296073728,0.784341228691182,0.785593237244935,0.786845318787452,0.788097470371025,0.789349689047780,0.790601971869688,0.791854315888565,0.793106718156087,0.794359175723790,0.795611685643082,0.796864244965245,0.798116850741446,0.799369500022745,0.800622189860096,0.801874917304358,0.803127679406305,0.804380473216625,0.805633295785934,0.806886144164778,0.808139015403646,0.809391906552969,0.810644814663134,0.811897736784487,0.813150669967341,0.814403611261984,0.815656557718682,0.816909506387692,0.818162454319265,0.819415398563652,0.820668336171116,0.821921264191933,0.823174179676400,0.824427079674849,0.825679961237644,0.826932821415192,0.828185657257955,0.829438465816446,0.830691244141248,0.831943989283011,0.833196698292467,0.834449368220428,0.835701996117802,0.836954579035596,0.838207114024920,0.839459598136999,0.840712028423178,0.841964401934927,0.843216715723851,0.844468966841696,0.845721152340354,0.846973269271873,0.848225314688461,0.849477285642496,0.850729179186529,0.851980992373296,0.853232722255720,0.854484365886921,0.855735920320223,0.856987382609158,0.858238749807477,0.859490018969152,0.860741187148388,0.861992251399629,0.863243208777560,0.864494056337121,0.865744791133509,0.866995410222185,0.868245910658887,0.869496289499626,0.870746543800705,0.871996670618717,0.873246667010557,0.874496530033424,0.875746256744834,0.876995844202624,0.878245289464956,0.879494589590329,0.880743741637584,0.881992742665909,0.883241589734848,0.884490279904309,0.885738810234567,0.886987177786275,0.888235379620469,0.889483412798574,0.890731274382414,0.891978961434215,0.893226471016616,0.894473800192670,0.895720946025860,0.896967905580096,0.898214675919730,0.899461254109557,0.900707637214826,0.901953822301243,0.903199806434984,0.904445586682694,0.905691160111501,0.906936523789018,0.908181674783353,0.909426610163114,0.910671326997417,0.911915822355892,0.913160093308692,0.914404136926496,0.915647950280519,0.916891530442520,0.918134874484803,0.919377979480233,0.920620842502233,0.921863460624798,0.923105830922500,0.924347950470494,0.925589816344524,0.926831425620932,0.928072775376666,0.929313862689282,0.930554684636955,0.931795238298486,0.933035520753306,0.934275529081484,0.935515260363737,0.936754711681432,0.937993880116596,0.939232762751920,0.940471356670772,0.941709658957195,0.942947666695922,0.944185376972379,0.945422786872690,0.946659893483688,0.947896693892920,0.949133185188654,0.950369364459885,0.951605228796343,0.952840775288499,0.954076001027573,0.955310903105540,0.956545478615136,0.957779724649866,0.959013638304013,0.960247216672640,0.961480456851599,0.962713355937541,0.963945911027918,0.965178119220991,0.966409977615839,0.967641483312365,0.968872633411301,0.970103425014217,0.971333855223528,0.972563921142497,0.973793619875246,0.975022948526763,0.976251904202906,0.977480484010410,0.978708685056897,0.979936504450878,0.981163939301766,0.982390986719876,0.983617643816438,0.984843907703598,0.986069775494429,0.987295244302938,0.988520311244070,0.989744973433714,0.990969227988716,0.992193072026879,0.993416502666974,0.994639517028742,0.995862112232908,0.997084285401182,0.998306033656268,0.999527354121869,1.00074824392270,1.00196870018448,1.00318872003396,1.00440830059890,1.00562743900813,1.00684613239148,1.00806437787986,1.00928217260521,1.01049951370054,1.01171639829994,1.01293282353855,1.01414878655262,1.01536428447947,1.01657931445752,1.01779387362628,1.01900795912639,1.02022156809959,1.02143469768875,1.02264734503786,1.02385950729204,1.02507118159759,1.02628236510190,1.02749305495357,1.02870324830232,1.02991294229907,1.03112213409589,1.03233082084606,1.03353899970402,1.03474666782544,1.03595382236715,1.03716046048722,1.03836657934492,1.03957217610077,1.04077724791648,1.04198179195502,1.04318580538059,1.04438928535866,1.04559222905593,1.04679463364039,1.04799649628127,1.04919781414909,1.05039858441565,1.05159880425406,1.05279847083868,1.05399758134523,1.05519613295068,1.05639412283336,1.05759154817291,1.05878840615029,1.05998469394780,1.06118040874908,1.06237554773914,1.06357010810432,1.06476408703232,1.06595748171224,1.06715028933452,1.06834250709101,1.06953413217492,1.07072516178088,1.07191559310492,1.07310542334446,1.07429464969836,1.07548326936688,1.07667127955171,1.07785867745600,1.07904546028430,1.08023162524266,1.08141716953853,1.08260209038086,1.08378638498005,1.08497005054798,1.08615308429801,1.08733548344500,1.08851724520527,1.08969836679668,1.09087884543857,1.09205867835180,1.09323786275876,1.09441639588336,1.09559427495104,1.09677149718878,1.09794805982512,1.09912396009013,1.10029919521546,1.10147376243431,1.10264765898146,1.10382088209328,1.10499342900771,1.10616529696428,1.10733648320412,1.10850698496998,1.10967679950622,1.11084592405878,1.11201435587528,1.11318209220493,1.11434913029860,1.11551546740879,1.11668110078965,1.11784602769701,1.11901024538832,1.12017375112275,1.12133654216111,1.12249861576590,1.12365996920131,1.12482059973325,1.12598050462929,1.12713968115873,1.12829812659259,1.12945583820361,1.13061281326624,1.13176904905667,1.13292454285286,1.13407929193448,1.13523329358296,1.13638654508150,1.13753904371507,1.13869078677041,1.13984177153601,1.14099199530219,1.14214145536103,1.14329014900642,1.14443807353405,1.14558522624143,1.14673160442788,1.14787720539454,1.14902202644438,1.15016606488222,1.15130931801470,1.15245178315033,1.15359345759947,1.15473433867432,1.15587442368898,1.15701370995941,1.15815219480344,1.15928987554080,1.16042674949311,1.16156281398390,1.16269806633858,1.16383250388449,1.16496612395089,1.16609892386895,1.16723090097179,1.16836205259446,1.16949237607394,1.17062186874918,1.17175052796106,1.17287835105246,1.17400533536820,1.17513147825507,1.17625677706187,1.17738122913936,1.17850483184030,1.17962758251947,1.18074947853361,1.18187051724153,1.18299069600401,1.18411001218388,1.18522846314600,1.18634604625725,1.18746275888657,1.18857859840494,1.18969356218541,1.19080764760307,1.19192085203510,1.19303317286073,1.19414460746129,1.19525515322019,1.19636480752293,1.19747356775711,1.19858143131244,1.19968839558073,1.20079445795592,1.20189961583407,1.20300386661335,1.20410720769410,1.20520963647878,1.20631115037199,1.20741174678051,1.20851142311326,1.20961017678133,1.21070800519798,1.21180490577866,1.21290087594099,1.21399591310479,1.21509001469207,1.21618317812704,1.21727540083615,1.21836668024801,1.21945701379349,1.22054639890568,1.22163483301990,1.22272231357370,1.22380883800689,1.22489440376152,1.22597900828191,1.22706264901463,1.22814532340852,1.22922702891469,1.23030776298656,1.23138752307980,1.23246630665239,1.23354411116462,1.23462093407906,1.23569677286061,1.23677162497648,1.23784548789620,1.23891835909164,1.23999023603700,1.24106111620880,1.24213099708594,1.24319987614966,1.24426775088354,1.24533461877355,1.24640047730802,1.24746532397766,1.24852915627556,1.24959197169718,1.25065376774041,1.25171454190552,1.25277429169517,1.25383301461447,1.25489070817091,1.25594736987443,1.25700299723738,1.25805758777455,1.25911113900319,1.26016364844297,1.26121511361602,1.26226553204695,1.26331490126280,1.26436321879310,1.26541048216985,1.26645668892755,1.26750183660315,1.26854592273613,1.26958894486846,1.27063090054459,1.27167178731151,1.27271160271872,1.27375034431823,1.27478800966459,1.27582459631489,1.27686010182874,1.27789452376831,1.27892785969831,1.27996010718602,1.28099126380127,1.28202132711646,1.28305029470658,1.28407816414919,1.28510493302441,1.28613059891499,1.28715515940626,1.28817861208615,1.28920095454520,1.29022218437656,1.29124229917602,1.29226129654196,1.29327917407541,1.29429592938005,1.29531156006218,1.29632606373076,1.29733943799739,1.29835168047634,1.29936278878455,1.30037276054162,1.30138159336982,1.30238928489411,1.30339583274215,1.30440123454427,1.30540548793350,1.30640859054559,1.30741054001899,1.30841133399485,1.30941097011708,1.31040944603227,1.31140675938977,1.31240290784165,1.31339788904275,1.31439170065062,1.31538434032560,1.31637580573076,1.31736609453195,1.31835520439778,1.31934313299966,1.32032987801175,1.32131543711100,1.32229980797719,1.32328298829284,1.32426497574332,1.32524576801678,1.32622536280420,1.32720375779936,1.32818095069890,1.32915693920225,1.33013172101170,1.33110529383237,1.33207765537223,1.33304880334211,1.33401873545567,1.33498744942948,1.33595494298292,1.33692121383829,1.33788625972075,1.33885007835833,1.33981266748198,1.34077402482552,1.34173414812569,1.34269303512210,1.34365068355732,1.34460709117679,1.34556225572891,1.34651617496497,1.34746884663922,1.34842026850883,1.34937043833392,1.35031935387757,1.35126701290578,1.35221341318754,1.35315855249478,1.35410242860242,1.35504503928834,1.35598638233340,1.35692645552145,1.35786525663933,1.35880278347686,1.35973903382688,1.36067400548523,1.36160769625074,1.36254010392529,1.36347122631376,1.36440106122405,1.36532960646711,1.36625685985691,1.36718281921046,1.36810748234784,1.36903084709216,1.36995291126959,1.37087367270936,1.37179312924378,1.37271127870821,1.37362811894112,1.37454364778403,1.37545786308155,1.37637076268142,1.37728234443442,1.37819260619448,1.37910154581862,1.38000916116696,1.38091545010277,1.38182041049240,1.38272404020537,1.38362633711430,1.38452729909497,1.38542692402629,1.38632520979032,1.38722215427227,1.38811775536053,1.38901201094662,1.38990491892524,1.39079647719428,1.39168668365477,1.39257553621097,1.39346303277028,1.39434917124333,1.39523394954393,1.39611736558909,1.39699941729903,1.39788010259719,1.39875941941021,1.39963736566798,1.40051393930358,1.40138913825334,1.40226296045684,1.40313540385688,1.40400646639951,1.40487614603405,1.40574444071304,1.40661134839231,1.40747686703095,1.40834099459131,1.40920372903902,1.41006506834300,1.41092501047543,1.41178355341181,1.41264069513091,1.41349643361482,1.41435076684890,1.41520369282186,1.41605520952569,1.41690531495571,1.41775400711057,1.41860128399224,1.41944714360601,1.42029158396053,1.42113460306778,1.42197619894308,1.42281636960510,1.42365511307589,1.42449242738082,1.42532831054867,1.42616276061154,1.42699577560495,1.42782735356777,1.42865749254226,1.42948619057407,1.43031344571224,1.43113925600921,1.43196361952081,1.43278653430630,1.43360799842833,1.43442800995297,1.43524656694971,1.43606366749146,1.43687930965458,1.43769349151884,1.43850621116746,1.43931746668708,1.44012725616783,1.44093557770325,1.44174242939035,1.44254780932962,1.44335171562498,1.44415414638384,1.44495509971709,1.44575457373909,1.44655256656766,1.44734907632415,1.44814410113338,1.44893763912365,1.44972968842679,1.45052024717811,1.45130931351646,1.45209688558416,1.45288296152708,1.45366753949461,1.45445061763966,1.45523219411867,1.45601226709161,1.45679083472200,1.45756789517690,1.45834344662693,1.45911748724623,1.45989001521253,1.46066102870711,1.46143052591482,1.46219850502406,1.46296496422682,1.46372990171868,1.46449331569878,1.46525520436985,1.46601556593823,1.46677439861383,1.46753170061018,1.46828747014440,1.46904170543723,1.46979440471300,1.47054556619968,1.47129518812885,1.47204326873571,1.47278980625911,1.47353479894150,1.47427824502900,1.47502014277133,1.47576049042191,1.47649928623776,1.47723652847958,1.47797221541172,1.47870634530218,1.47943891642266,1.48016992704849,1.48089937545870,1.48162725993599,1.48235357876673,1.48307833024100,1.48380151265254,1.48452312429882,1.48524316348098,1.48596162850387,1.48667851767604,1.48739382930977,1.48810756172104,1.48881971322953,1.48953028215868,1.49023926683563,1.49094666559125,1.49165247676015,1.49235669868068,1.49305932969494,1.49376036814874,1.49445981239169,1.49515766077710,1.49585391166208,1.49654856340747,1.49724161437791,1.49793306294177,1.49862290747122,1.49931114634219,1.49999777793439,1.50068280063134,1.50136621282031,1.50204801289239,1.50272819924245,1.50340677026916,1.50408372437501,1.50475905996627,1.50543277545304,1.50610486924923,1.50677533977256,1.50744418544459,1.50811140469067,1.50877699594002,1.50944095762567,1.51010328818450,1.51076398605720,1.51142304968834,1.51208047752632,1.51273626802339,1.51339041963566,1.51404293082309,1.51469380004952,1.51534302578264,1.51599060649401,1.51663654065906,1.51728082675711,1.51792346327135,1.51856444868886,1.51920378150059,1.51984146020141,1.52047748329006,1.52111184926918,1.52174455664532,1.52237560392893,1.52300498963437,1.52363271227992,1.52425877038776,1.52488316248399,1.52550588709864,1.52612694276567,1.52674632802295,1.52736404141231,1.52798008147949,1.52859444677418,1.52920713585002,1.52981814726458,1.53042747957940,1.53103513135995,1.53164110117567,1.53224538759997,1.53284798921020,1.53344890458769,1.53404813231774,1.53464567098961,1.53524151919656,1.53583567553582,1.53642813860858,1.53701890702006,1.53760797937942,1.53819535429986,1.53878103039855,1.53936500629666,1.53994728061937,1.54052785199586,1.54110671905932,1.54168388044697,1.54225933480001,1.54283308076369,1.54340511698727,1.54397544212403,1.54454405483129,1.54511095377040,1.54567613760673,1.54623960500971,1.54680135465279,1.54736138521347,1.54791969537332,1.54847628381791,1.54903114923692,1.54958429032405,1.55013570577707,1.55068539429781,1.55123335459217,1.55177958537013,1.55232408534570,1.55286685323702,1.55340788776627,1.55394718765971,1.55448475164772,1.55502057846472,1.55555466684926,1.55608701554395,1.55661762329552,1.55714648885478,1.55767361097665,1.55819898842017,1.55872261994846,1.55924450432876,1.55976464033244,1.56028302673495,1.56079966231590,1.56131454585900,1.56182767615208,1.56233905198711,1.56284867216018,1.56335653547153,1.56386264072551,1.56436698673063,1.56486957229954,1.56537039624903,1.56586945740004,1.56636675457764,1.56686228661108,1.56735605233377,1.56784805058324,1.56833828020122,1.56882674003358,1.56931342893038,1.56979834574582,1.57028148933829,1.57076285857036,1.57124245230875,1.57172026942440,1.57219630879240,1.57267056929203,1.57314304980677,1.57361374922429,1.57408266643645,1.57454980033929,1.57501514983307,1.57547871382224,1.57594049121546,1.57640048092559,1.57685868186970,1.57731509296907,1.57776971314921,1.57822254133981,1.57867357647482,1.57912281749238,1.57957026333488,1.58001591294891,1.58045976528531,1.58090181929913,1.58134207394967,1.58178052820048,1.58221718101930,1.58265203137817,1.58308507825333,1.58351632062529,1.58394575747879,1.58437338780283,1.58479921059068,1.58522322483982,1.58564542955204,1.58606582373336,1.58648440639407,1.58690117654871,1.58731613321612,1.58772927541938,1.58814060218585,1.58855011254716,1.58895780553924,1.58936368020227,1.58976773558072,1.59016997072334,1.59057038468319,1.59096897651757,1.59136574528811,1.59176069006072,1.59215380990560,1.59254510389725,1.59293457111447,1.59332221064035,1.59370802156230,1.59409200297203,1.59447415396554,1.59485447364316,1.59523296110952,1.59560961547358,1.59598443584858,1.59635742135213,1.59672857110610,1.59709788423673,1.59746535987457,1.59783099715448,1.59819479521566,1.59855675320165,1.59891687026031,1.59927514554382,1.59963157820874,1.59998616741591,1.60033891233056,1.60068981212223,1.60103886596483,1.60138607303659,1.60173143252009,1.60207494360229,1.60241660547447,1.60275641733228,1.60309437837570,1.60343048780911,1.60376474484122,1.60409714868509,1.60442769855818,1.60475639368229,1.60508323328358,1.60540821659261,1.60573134284426,1.60605261127784,1.60637202113698,1.60668957166973,1.60700526212849,1.60731909177005,1.60763105985558,1.60794116565062,1.60824940842511,1.60855578745337,1.60886030201412,1.60916295139044,1.60946373486983,1.60976265174416,1.61005970130972,1.61035488286718,1.61064819572161,1.61093963918247,1.61122921256364,1.61151691518338,1.61180274636439,1.61208670543373,1.61236879172291,1.61264900456781,1.61292734330875,1.61320380729046,1.61347839586207,1.61375110837712,1.61402194419359,1.61429090267386,1.61455798318474,1.61482318509746,1.61508650778766,1.61534795063542,1.61560751302523,1.61586519434603,1.61612099399117,1.61637491135842,1.61662694585002,1.61687709687261,1.61712536383726,1.61737174615951,1.61761624325930,1.61785885456103,1.61809957949353,1.61833841749007,1.61857536798838,1.61881043043061,1.61904360426337,1.61927488893771,1.61950428390913,1.61973178863757,1.61995740258743,1.62018112522757,1.62040295603129,1.62062289447634,1.62084094004492,1.62105709222372,1.62127135050385,1.62148371438090,1.62169418335490,1.62190275693037,1.62210943461627,1.62231421592604,1.62251710037755,1.62271808749318,1.62291717679976,1.62311436782857,1.62330966011538,1.62350305320042,1.62369454662841,1.62388413994851,1.62407183271438,1.62425762448414,1.62444151482040,1.62462350329022,1.62480358946517,1.62498177292128,1.62515805323906,1.62533243000349,1.62550490280407,1.62567547123474,1.62584413489394,1.62601089338460,1.62617574631412,1.62633869329441,1.62649973394185,1.62665886787730,1.62681609472612,1.62697141411817,1.62712482568779,1.62727632907380,1.62742592391953,1.62757360987280,1.62771938658591,1.62786325371568,1.62800521092341,1.62814525787488,1.62828339424041,1.62841961969477,1.62855393391727,1.62868633659169,1.62881682740633,1.62894540605398,1.62907207223192,1.62919682564197,1.62931966599042,1.62944059298806,1.62955960635022,1.62967670579670,1.62979189105183,1.62990516184442,1.63001651790781,1.63012595897985,1.63023348480287,1.63033909512374,1.63044278969383,1.63054456826901,1.63064443060968,1.63074237648072,1.63083840565155,1.63093251789610,1.63102471299280,1.63111499072461,1.63120335087898,1.63128979324789,1.63137431762784,1.63145692381984,1.63153761162941,1.63161638086660,1.63169323134595,1.63176816288655,1.63184117531199,1.63191226845037,1.63198144213434,1.63204869620103,1.63211403049212,1.63217744485378,1.63223893913674,1.63229851319620,1.63235616689194,1.63241190008820,1.63246571265379,1.63251760446201,1.63256757539070,1.63261562532221,1.63266175414343,1.63270596174575,1.63274824802510,1.63278861288193,1.63282705622121,1.63286357795242,1.63289817798960,1.63293085625129,1.63296161266055,1.63299044714497,1.63301735963667,1.63304235007229,1.63306541839300,1.63308656454449,1.63310578847698,1.63312309014521,1.63313846950844,1.63315192653047,1.63316346117962,1.63317307342873,1.63318076325517,1.63318653064085,1.63319037557218,1.63319229804010,1.63319229804010,1.63319037557218,1.63318653064085,1.63318076325517,1.63317307342873,1.63316346117962,1.63315192653047,1.63313846950844,1.63312309014521,1.63310578847698,1.63308656454449,1.63306541839300,1.63304235007229,1.63301735963667,1.63299044714497,1.63296161266055,1.63293085625129,1.63289817798960,1.63286357795242,1.63282705622121,1.63278861288193,1.63274824802510,1.63270596174575,1.63266175414343,1.63261562532221,1.63256757539070,1.63251760446201,1.63246571265379,1.63241190008820,1.63235616689194,1.63229851319620,1.63223893913674,1.63217744485378,1.63211403049212,1.63204869620103,1.63198144213434,1.63191226845037,1.63184117531199,1.63176816288655,1.63169323134595,1.63161638086660,1.63153761162941,1.63145692381984,1.63137431762784,1.63128979324789,1.63120335087898,1.63111499072461,1.63102471299280,1.63093251789610,1.63083840565155,1.63074237648072,1.63064443060968,1.63054456826901,1.63044278969383,1.63033909512374,1.63023348480287,1.63012595897985,1.63001651790781,1.62990516184442,1.62979189105183,1.62967670579670,1.62955960635022,1.62944059298806,1.62931966599042,1.62919682564197,1.62907207223192,1.62894540605398,1.62881682740633,1.62868633659169,1.62855393391727,1.62841961969477,1.62828339424041,1.62814525787488,1.62800521092341,1.62786325371568,1.62771938658591,1.62757360987280,1.62742592391953,1.62727632907380,1.62712482568779,1.62697141411817,1.62681609472612,1.62665886787730,1.62649973394185,1.62633869329441,1.62617574631412,1.62601089338460,1.62584413489394,1.62567547123474,1.62550490280407,1.62533243000349,1.62515805323906,1.62498177292128,1.62480358946517,1.62462350329022,1.62444151482040,1.62425762448414,1.62407183271438,1.62388413994851,1.62369454662841,1.62350305320042,1.62330966011538,1.62311436782857,1.62291717679976,1.62271808749318,1.62251710037755,1.62231421592604,1.62210943461627,1.62190275693037,1.62169418335490,1.62148371438090,1.62127135050385,1.62105709222372,1.62084094004492,1.62062289447634,1.62040295603129,1.62018112522757,1.61995740258743,1.61973178863757,1.61950428390913,1.61927488893771,1.61904360426337,1.61881043043061,1.61857536798838,1.61833841749007,1.61809957949353,1.61785885456103,1.61761624325930,1.61737174615951,1.61712536383726,1.61687709687261,1.61662694585002,1.61637491135842,1.61612099399117,1.61586519434603,1.61560751302523,1.61534795063542,1.61508650778766,1.61482318509746,1.61455798318474,1.61429090267386,1.61402194419359,1.61375110837712,1.61347839586207,1.61320380729046,1.61292734330875,1.61264900456781,1.61236879172291,1.61208670543373,1.61180274636439,1.61151691518338,1.61122921256364,1.61093963918247,1.61064819572161,1.61035488286718,1.61005970130972,1.60976265174416,1.60946373486983,1.60916295139044,1.60886030201412,1.60855578745337,1.60824940842511,1.60794116565062,1.60763105985558,1.60731909177005,1.60700526212849,1.60668957166973,1.60637202113698,1.60605261127784,1.60573134284426,1.60540821659261,1.60508323328358,1.60475639368229,1.60442769855818,1.60409714868509,1.60376474484122,1.60343048780911,1.60309437837570,1.60275641733228,1.60241660547447,1.60207494360229,1.60173143252009,1.60138607303659,1.60103886596483,1.60068981212223,1.60033891233056,1.59998616741591,1.59963157820874,1.59927514554382,1.59891687026031,1.59855675320165,1.59819479521566,1.59783099715448,1.59746535987457,1.59709788423673,1.59672857110610,1.59635742135213,1.59598443584858,1.59560961547358,1.59523296110952,1.59485447364316,1.59447415396554,1.59409200297203,1.59370802156230,1.59332221064035,1.59293457111447,1.59254510389725,1.59215380990560,1.59176069006072,1.59136574528811,1.59096897651757,1.59057038468319,1.59016997072334,1.58976773558072,1.58936368020227,1.58895780553924,1.58855011254716,1.58814060218585,1.58772927541938,1.58731613321612,1.58690117654871,1.58648440639407,1.58606582373336,1.58564542955204,1.58522322483982,1.58479921059068,1.58437338780283,1.58394575747879,1.58351632062529,1.58308507825333,1.58265203137817,1.58221718101930,1.58178052820048,1.58134207394967,1.58090181929913,1.58045976528531,1.58001591294891,1.57957026333488,1.57912281749238,1.57867357647482,1.57822254133981,1.57776971314921,1.57731509296907,1.57685868186970,1.57640048092559,1.57594049121546,1.57547871382224,1.57501514983307,1.57454980033929,1.57408266643645,1.57361374922429,1.57314304980677,1.57267056929203,1.57219630879240,1.57172026942440,1.57124245230875,1.57076285857036,1.57028148933829,1.56979834574582,1.56931342893038,1.56882674003358,1.56833828020122,1.56784805058324,1.56735605233377,1.56686228661108,1.56636675457764,1.56586945740004,1.56537039624903,1.56486957229954,1.56436698673063,1.56386264072551,1.56335653547153,1.56284867216018,1.56233905198711,1.56182767615208,1.56131454585900,1.56079966231590,1.56028302673495,1.55976464033244,1.55924450432876,1.55872261994846,1.55819898842017,1.55767361097665,1.55714648885478,1.55661762329552,1.55608701554395,1.55555466684926,1.55502057846472,1.55448475164772,1.55394718765971,1.55340788776627,1.55286685323702,1.55232408534570,1.55177958537013,1.55123335459217,1.55068539429781,1.55013570577707,1.54958429032405,1.54903114923692,1.54847628381791,1.54791969537332,1.54736138521347,1.54680135465279,1.54623960500971,1.54567613760673,1.54511095377040,1.54454405483129,1.54397544212403,1.54340511698727,1.54283308076369,1.54225933480001,1.54168388044697,1.54110671905932,1.54052785199586,1.53994728061937,1.53936500629666,1.53878103039855,1.53819535429986,1.53760797937942,1.53701890702006,1.53642813860858,1.53583567553582,1.53524151919656,1.53464567098961,1.53404813231774,1.53344890458769,1.53284798921020,1.53224538759997,1.53164110117567,1.53103513135995,1.53042747957940,1.52981814726458,1.52920713585002,1.52859444677418,1.52798008147949,1.52736404141231,1.52674632802295,1.52612694276567,1.52550588709864,1.52488316248399,1.52425877038776,1.52363271227992,1.52300498963437,1.52237560392893,1.52174455664532,1.52111184926918,1.52047748329006,1.51984146020141,1.51920378150059,1.51856444868886,1.51792346327135,1.51728082675711,1.51663654065906,1.51599060649401,1.51534302578264,1.51469380004952,1.51404293082309,1.51339041963566,1.51273626802339,1.51208047752632,1.51142304968834,1.51076398605720,1.51010328818450,1.50944095762567,1.50877699594002,1.50811140469067,1.50744418544459,1.50677533977256,1.50610486924923,1.50543277545304,1.50475905996627,1.50408372437501,1.50340677026916,1.50272819924245,1.50204801289239,1.50136621282031,1.50068280063134,1.49999777793439,1.49931114634219,1.49862290747122,1.49793306294177,1.49724161437791,1.49654856340747,1.49585391166208,1.49515766077710,1.49445981239169,1.49376036814874,1.49305932969494,1.49235669868068,1.49165247676015,1.49094666559125,1.49023926683563,1.48953028215868,1.48881971322953,1.48810756172104,1.48739382930977,1.48667851767604,1.48596162850387,1.48524316348098,1.48452312429882,1.48380151265254,1.48307833024100,1.48235357876673,1.48162725993599,1.48089937545870,1.48016992704849,1.47943891642266,1.47870634530218,1.47797221541172,1.47723652847958,1.47649928623776,1.47576049042191,1.47502014277133,1.47427824502900,1.47353479894150,1.47278980625911,1.47204326873571,1.47129518812885,1.47054556619968,1.46979440471300,1.46904170543723,1.46828747014440,1.46753170061018,1.46677439861383,1.46601556593823,1.46525520436985,1.46449331569878,1.46372990171868,1.46296496422682,1.46219850502406,1.46143052591482,1.46066102870711,1.45989001521253,1.45911748724623,1.45834344662693,1.45756789517690,1.45679083472200,1.45601226709161,1.45523219411867,1.45445061763966,1.45366753949461,1.45288296152708,1.45209688558416,1.45130931351646,1.45052024717811,1.44972968842679,1.44893763912365,1.44814410113338,1.44734907632415,1.44655256656766,1.44575457373909,1.44495509971709,1.44415414638384,1.44335171562498,1.44254780932962,1.44174242939035,1.44093557770325,1.44012725616783,1.43931746668708,1.43850621116746,1.43769349151884,1.43687930965458,1.43606366749146,1.43524656694971,1.43442800995297,1.43360799842833,1.43278653430630,1.43196361952081,1.43113925600921,1.43031344571224,1.42948619057407,1.42865749254226,1.42782735356777,1.42699577560495,1.42616276061154,1.42532831054867,1.42449242738082,1.42365511307589,1.42281636960510,1.42197619894308,1.42113460306778,1.42029158396053,1.41944714360601,1.41860128399224,1.41775400711057,1.41690531495571,1.41605520952569,1.41520369282186,1.41435076684890,1.41349643361482,1.41264069513091,1.41178355341181,1.41092501047543,1.41006506834300,1.40920372903902,1.40834099459131,1.40747686703095,1.40661134839231,1.40574444071304,1.40487614603405,1.40400646639951,1.40313540385688,1.40226296045684,1.40138913825334,1.40051393930358,1.39963736566798,1.39875941941021,1.39788010259719,1.39699941729903,1.39611736558909,1.39523394954393,1.39434917124333,1.39346303277028,1.39257553621097,1.39168668365477,1.39079647719428,1.38990491892524,1.38901201094662,1.38811775536053,1.38722215427227,1.38632520979032,1.38542692402629,1.38452729909497,1.38362633711430,1.38272404020537,1.38182041049240,1.38091545010277,1.38000916116696,1.37910154581862,1.37819260619448,1.37728234443442,1.37637076268142,1.37545786308155,1.37454364778403,1.37362811894112,1.37271127870821,1.37179312924378,1.37087367270936,1.36995291126959,1.36903084709216,1.36810748234784,1.36718281921046,1.36625685985691,1.36532960646711,1.36440106122405,1.36347122631376,1.36254010392529,1.36160769625074,1.36067400548523,1.35973903382688,1.35880278347686,1.35786525663933,1.35692645552145,1.35598638233340,1.35504503928834,1.35410242860242,1.35315855249478,1.35221341318754,1.35126701290578,1.35031935387757,1.34937043833392,1.34842026850883,1.34746884663922,1.34651617496497,1.34556225572891,1.34460709117679,1.34365068355732,1.34269303512210,1.34173414812569,1.34077402482552,1.33981266748198,1.33885007835833,1.33788625972075,1.33692121383829,1.33595494298292,1.33498744942948,1.33401873545567,1.33304880334211,1.33207765537223,1.33110529383237,1.33013172101170,1.32915693920225,1.32818095069890,1.32720375779936,1.32622536280420,1.32524576801678,1.32426497574332,1.32328298829284,1.32229980797719,1.32131543711100,1.32032987801175,1.31934313299966,1.31835520439778,1.31736609453195,1.31637580573076,1.31538434032560,1.31439170065062,1.31339788904275,1.31240290784165,1.31140675938977,1.31040944603227,1.30941097011708,1.30841133399485,1.30741054001899,1.30640859054559,1.30540548793350,1.30440123454427,1.30339583274215,1.30238928489411,1.30138159336982,1.30037276054162,1.29936278878455,1.29835168047634,1.29733943799739,1.29632606373076,1.29531156006218,1.29429592938005,1.29327917407541,1.29226129654196,1.29124229917602,1.29022218437656,1.28920095454520,1.28817861208615,1.28715515940626,1.28613059891499,1.28510493302441,1.28407816414919,1.28305029470658,1.28202132711646,1.28099126380127,1.27996010718602,1.27892785969831,1.27789452376831,1.27686010182874,1.27582459631489,1.27478800966459,1.27375034431823,1.27271160271872,1.27167178731151,1.27063090054459,1.26958894486846,1.26854592273613,1.26750183660315,1.26645668892755,1.26541048216985,1.26436321879310,1.26331490126280,1.26226553204695,1.26121511361602,1.26016364844297,1.25911113900319,1.25805758777455,1.25700299723738,1.25594736987443,1.25489070817091,1.25383301461447,1.25277429169517,1.25171454190552,1.25065376774041,1.24959197169718,1.24852915627556,1.24746532397766,1.24640047730802,1.24533461877355,1.24426775088354,1.24319987614966,1.24213099708594,1.24106111620880,1.23999023603700,1.23891835909164,1.23784548789620,1.23677162497648,1.23569677286061,1.23462093407906,1.23354411116462,1.23246630665239,1.23138752307980,1.23030776298656,1.22922702891469,1.22814532340852,1.22706264901463,1.22597900828191,1.22489440376152,1.22380883800689,1.22272231357370,1.22163483301990,1.22054639890568,1.21945701379349,1.21836668024801,1.21727540083615,1.21618317812704,1.21509001469207,1.21399591310479,1.21290087594099,1.21180490577866,1.21070800519798,1.20961017678133,1.20851142311326,1.20741174678051,1.20631115037199,1.20520963647878,1.20410720769410,1.20300386661335,1.20189961583407,1.20079445795592,1.19968839558073,1.19858143131244,1.19747356775711,1.19636480752293,1.19525515322019,1.19414460746129,1.19303317286073,1.19192085203510,1.19080764760307,1.18969356218541,1.18857859840494,1.18746275888657,1.18634604625725,1.18522846314600,1.18411001218388,1.18299069600401,1.18187051724153,1.18074947853361,1.17962758251947,1.17850483184030,1.17738122913936,1.17625677706187,1.17513147825507,1.17400533536820,1.17287835105246,1.17175052796106,1.17062186874918,1.16949237607394,1.16836205259446,1.16723090097179,1.16609892386895,1.16496612395089,1.16383250388449,1.16269806633858,1.16156281398390,1.16042674949311,1.15928987554080,1.15815219480344,1.15701370995941,1.15587442368898,1.15473433867432,1.15359345759947,1.15245178315033,1.15130931801470,1.15016606488222,1.14902202644438,1.14787720539454,1.14673160442788,1.14558522624143,1.14443807353405,1.14329014900642,1.14214145536103,1.14099199530219,1.13984177153601,1.13869078677041,1.13753904371507,1.13638654508150,1.13523329358296,1.13407929193448,1.13292454285286,1.13176904905667,1.13061281326624,1.12945583820361,1.12829812659259,1.12713968115873,1.12598050462929,1.12482059973325,1.12365996920131,1.12249861576590,1.12133654216111,1.12017375112275,1.11901024538832,1.11784602769701,1.11668110078965,1.11551546740879,1.11434913029860,1.11318209220493,1.11201435587528,1.11084592405878,1.10967679950622,1.10850698496998,1.10733648320412,1.10616529696428,1.10499342900771,1.10382088209328,1.10264765898146,1.10147376243431,1.10029919521546,1.09912396009013,1.09794805982512,1.09677149718878,1.09559427495104,1.09441639588336,1.09323786275876,1.09205867835180,1.09087884543857,1.08969836679668,1.08851724520527,1.08733548344500,1.08615308429801,1.08497005054798,1.08378638498005,1.08260209038086,1.08141716953853,1.08023162524266,1.07904546028430,1.07785867745600,1.07667127955171,1.07548326936688,1.07429464969836,1.07310542334446,1.07191559310492,1.07072516178088,1.06953413217492,1.06834250709101,1.06715028933452,1.06595748171224,1.06476408703232,1.06357010810432,1.06237554773914,1.06118040874908,1.05998469394780,1.05878840615029,1.05759154817291,1.05639412283336,1.05519613295068,1.05399758134523,1.05279847083868,1.05159880425406,1.05039858441565,1.04919781414909,1.04799649628127,1.04679463364039,1.04559222905593,1.04438928535866,1.04318580538059,1.04198179195502,1.04077724791648,1.03957217610077,1.03836657934492,1.03716046048722,1.03595382236715,1.03474666782544,1.03353899970402,1.03233082084606,1.03112213409589,1.02991294229907,1.02870324830232,1.02749305495357,1.02628236510190,1.02507118159759,1.02385950729204,1.02264734503786,1.02143469768875,1.02022156809959,1.01900795912639,1.01779387362628,1.01657931445752,1.01536428447947,1.01414878655262,1.01293282353855,1.01171639829994,1.01049951370054,1.00928217260521,1.00806437787986,1.00684613239148,1.00562743900813,1.00440830059890,1.00318872003396,1.00196870018448,1.00074824392270,0.999527354121869,0.998306033656268,0.997084285401182,0.995862112232908,0.994639517028742,0.993416502666974,0.992193072026879,0.990969227988716,0.989744973433714,0.988520311244070,0.987295244302938,0.986069775494429,0.984843907703598,0.983617643816438,0.982390986719876,0.981163939301766,0.979936504450878,0.978708685056897,0.977480484010410,0.976251904202906,0.975022948526763,0.973793619875246,0.972563921142497,0.971333855223528,0.970103425014217,0.968872633411301,0.967641483312365,0.966409977615839,0.965178119220991,0.963945911027918,0.962713355937541,0.961480456851599,0.960247216672640,0.959013638304013,0.957779724649866,0.956545478615136,0.955310903105540,0.954076001027573,0.952840775288499,0.951605228796343,0.950369364459885,0.949133185188654,0.947896693892920,0.946659893483688,0.945422786872690,0.944185376972379,0.942947666695922,0.941709658957195,0.940471356670772,0.939232762751920,0.937993880116596,0.936754711681432,0.935515260363737,0.934275529081484,0.933035520753306,0.931795238298486,0.930554684636955,0.929313862689282,0.928072775376666,0.926831425620932,0.925589816344524,0.924347950470494,0.923105830922500,0.921863460624798,0.920620842502233,0.919377979480233,0.918134874484803,0.916891530442520,0.915647950280519,0.914404136926496,0.913160093308692,0.911915822355892,0.910671326997417,0.909426610163114,0.908181674783353,0.906936523789018,0.905691160111501,0.904445586682694,0.903199806434984,0.901953822301243,0.900707637214826,0.899461254109557,0.898214675919730,0.896967905580096,0.895720946025860,0.894473800192670,0.893226471016616,0.891978961434215,0.890731274382414,0.889483412798574,0.888235379620469,0.886987177786275,0.885738810234567,0.884490279904309,0.883241589734848,0.881992742665909,0.880743741637584,0.879494589590329,0.878245289464956,0.876995844202624,0.875746256744834,0.874496530033424,0.873246667010557,0.871996670618717,0.870746543800705,0.869496289499626,0.868245910658887,0.866995410222185,0.865744791133509,0.864494056337121,0.863243208777560,0.861992251399629,0.860741187148388,0.859490018969152,0.858238749807477,0.856987382609158,0.855735920320223,0.854484365886921,0.853232722255720,0.851980992373296,0.850729179186529,0.849477285642496,0.848225314688461,0.846973269271873,0.845721152340354,0.844468966841696,0.843216715723851,0.841964401934927,0.840712028423178,0.839459598136999,0.838207114024920,0.836954579035596,0.835701996117802,0.834449368220428,0.833196698292467,0.831943989283011,0.830691244141248,0.829438465816446,0.828185657257955,0.826932821415192,0.825679961237644,0.824427079674849,0.823174179676400,0.821921264191933,0.820668336171116,0.819415398563652,0.818162454319265,0.816909506387692,0.815656557718682,0.814403611261984,0.813150669967341,0.811897736784487,0.810644814663134,0.809391906552969,0.808139015403646,0.806886144164778,0.805633295785934,0.804380473216625,0.803127679406305,0.801874917304358,0.800622189860096,0.799369500022745,0.798116850741446,0.796864244965245,0.795611685643082,0.794359175723790,0.793106718156087,0.791854315888565,0.790601971869688,0.789349689047780,0.788097470371025,0.786845318787452,0.785593237244935,0.784341228691182,0.783089296073728,0.781837442339931,0.780585670436964,0.779333983311803,0.778082383911230,0.776830875181817,0.775579460069923,0.774328141521687,0.773076922483022,0.771825805899604,0.770574794716869,0.769323891880006,0.768073100333948,0.766822423023366,0.765571862892661,0.764321422885960,0.763071105947106,0.761820915019653,0.760570853046859,0.759320922971675,0.758071127736745,0.756821470284395,0.755571953556626,0.754322580495106,0.753073354041169,0.751824277135800,0.750575352719633,0.749326583732945,0.748077973115643,0.746829523807265,0.745581238746968,0.744333120873521,0.743085173125301,0.741837398440285,0.740589799756040,0.739342380009721,0.738095142138060,0.736848089077363,0.735601223763500,0.734354549131897,0.733108068117534,0.731861783654933,0.730615698678155,0.729369816120791,0.728124138915953,0.726878669996274,0.725633412293892,0.724388368740452,0.723143542267092,0.721898935804438,0.720654552282603,0.719410394631169,0.718166465779191,0.716922768655183,0.715679306187114,0.714436081302400,0.713193096927899,0.711950355989902,0.710707861414126,0.709465616125709,0.708223623049202,0.706981885108563,0.705740405227149,0.704499186327707,0.703258231332373,0.702017543162660,0.700777124739454,0.699536978983004,0.698297108812918,0.697057517148156,0.695818206907022,0.694579181007156,0.693340442365531,0.692101993898442,0.690863838521502,0.689625979149631,0.688388418697058,0.687151160077301,0.685914206203174,0.684677559986770,0.683441224339457,0.682205202171876,0.680969496393924,0.679734109914759,0.678499045642783,0.677264306485642,0.676029895350215,0.674795815142610,0.673562068768155,0.672328659131393,0.671095589136074,0.669862861685146,0.668630479680755,0.667398446024231,0.666166763616084,0.664935435355996,0.663704464142819,0.662473852874560,0.661243604448382,0.660013721760592,0.658784207706636,0.657555065181093,0.656326297077667,0.655097906289180,0.653869895707566,0.652642268223864,0.651415026728211,0.650188174109836,0.648961713257052,0.647735647057248,0.646509978396887,0.645284710161494,0.644059845235652,0.642835386502994,0.641611336846197,0.640387699146976,0.639164476286073,0.637941671143258,0.636719286597313,0.635497325526034,0.634275790806216,0.633054685313653,0.631834011923128,0.630613773508407,0.629393972942230,0.628174613096308,0.626955696841314,0.625737227046877,0.624519206581575,0.623301638312927,0.622084525107389,0.620867869830344,0.619651675346098,0.618435944517873,0.617220680207797,0.616005885276902,0.614791562585114,0.613577714991248,0.612364345352998,0.611151456526935,0.609939051368500,0.608727132731990,0.607515703470561,0.606304766436216,0.605094324479798,0.603884380450985,0.602674937198282,0.601465997569018,0.600257564409333,0.599049640564176,0.597842228877297,0.596635332191240,0.595428953347337,0.594223095185701,0.593017760545217,0.591812952263541,0.590608673177087,0.589404926121025,0.588201713929271,0.586999039434483,0.585796905468053,0.584595314860098,0.583394270439461,0.582193775033693,0.580993831469057,0.579794442570516,0.578595611161725,0.577397340065029,0.576199632101452,0.575002490090694,0.573805916851122,0.572609915199763,0.571414487952300,0.570219637923061,0.569025367925019,0.567831680769778,0.566638579267573,0.565446066227256,0.564254144456297,0.563062816760773,0.561872085945363,0.560681954813340,0.559492426166565,0.558303502805481,0.557115187529107,0.555927483135029,0.554740392419395,0.553553918176909,0.552368063200823,0.551182830282931,0.549998222213563,0.548814241781578,0.547630891774358,0.546448174977798,0.545266094176306,0.544084652152790,0.542903851688656,0.541723695563798,0.540544186556594,0.539365327443899,0.538187121001037,0.537009570001795,0.535832677218418,0.534656445421602,0.533480877380485,0.532305975862645,0.531131743634087,0.529958183459243,0.528785298100964,0.527613090320509,0.526441562877544,0.525270718530132,0.524100560034730,0.522931090146178,0.521762311617696,0.520594227200877,0.519426839645678,0.518260151700416,0.517094166111763,0.515928885624735,0.514764312982689,0.513600450927315,0.512437302198631,0.511274869534976,0.510113155673001,0.508952163347667,0.507791895292236,0.506632354238263,0.505473542915594,0.504315464052356,0.503158120374951,0.502001514608051,0.500845649474590,0.499690527695759,0.498536151990999,0.497382525077995,0.496229649672668,0.495077528489170,0.493926164239878,0.492775559635386,0.491625717384501,0.490476640194235,0.489328330769797,0.488180791814591,0.487034026030206,0.485888036116409,0.484742824771145,0.483598394690521,0.482454748568807,0.481311889098429,0.480169818969957,0.479028540872107,0.477888057491728,0.476748371513798,0.475609485621417,0.474471402495805,0.473334124816288,0.472197655260298,0.471061996503364,0.469927151219105,0.468793122079227,0.467659911753513,0.466527522909820,0.465395958214068,0.464265220330241,0.463135311920372,0.462006235644544,0.460877994160881,0.459750590125540,0.458624026192708,0.457498305014593,0.456373429241421,0.455249401521425,0.454126224500843,0.453003900823910,0.451882433132853,0.450761824067881,0.449642076267184,0.448523192366925,0.447405175001230,0.446288026802189,0.445171750399842,0.444056348422179,0.442941823495131,0.441828178242563,0.440715415286269,0.439603537245969,0.438492546739297,0.437382446381796,0.436273238786917,0.435164926566007,0.434057512328306,0.432950998680939,0.431845388228912,0.430740683575104,0.429636887320260,0.428534002062989,0.427432030399755,0.426330974924868,0.425230838230486,0.424131622906601,0.423033331541034,0.421935966719436,0.420839531025272,0.419744027039821,0.418649457342170,0.417555824509206,0.416463131115607,0.415371379733845,0.414280572934169,0.413190713284608,0.412101803350959,0.411013845696784,0.409926842883403,0.408840797469889,0.407755712013058,0.406671589067469,0.405588431185415,0.404506240916915,0.403425020809712,0.402344773409263,0.401265501258737,0.400187206899005,0.399109892868639,0.398033561703900,0.396958215938736,0.395883858104776,0.394810490731323,0.393738116345347,0.392666737471482,0.391596356632017,0.390526976346892,0.389458599133691,0.388391227507636,0.387324863981584,0.386259511066016,0.385195171269035,0.384131847096358,0.383069541051313,0.382008255634830,0.380947993345434,0.379888756679245,0.378830548129965,0.377773370188879,0.376717225344843,0.375662116084282,0.374608044891183,0.373555014247088,0.372503026631091,0.371452084519830,0.370402190387480,0.369353346705750,0.368305555943878,0.367258820568619,0.366213143044246,0.365168525832543,0.364124971392793,0.363082482181782,0.362041060653785,0.361000709260566,0.359961430451366,0.358923226672903,0.357886100369366,0.356850053982405,0.355815089951126,0.354781210712091,0.353748418699306,0.352716716344216,0.351686106075703,0.350656590320078,0.349628171501073,0.348600852039839,0.347574634354939,0.346549520862342,0.345525513975417,0.344502616104929,0.343480829659030,0.342460157043258,0.341440600660526,0.340422162911121,0.339404846192696,0.338388652900266,0.337373585426198,0.336359646160211,0.335346837489369,0.334335161798071,0.333324621468051,0.332315218878370,0.331306956405409,0.330299836422867,0.329293861301751,0.328289033410376,0.327285355114351,0.326282828776584,0.325281456757268,0.324281241413878,0.323282185101169,0.322284290171163,0.321287558973152,0.320291993853685,0.319297597156569,0.318304371222856,0.317312318390847,0.316321440996076,0.315331741371313,0.314343221846554,0.313355884749018,0.312369732403140,0.311384767130563,0.310400991250139,0.309418407077918,0.308437016927145,0.307456823108253,0.306477827928861,0.305500033693764,0.304523442704929,0.303548057261493,0.302573879659752,0.301600912193160,0.300629157152322,0.299658616824988,0.298689293496050,0.297721189447532,0.296754306958590,0.295788648305502,0.294824215761668,0.293861011597598,0.292899038080911,0.291938297476331,0.290978792045677,0.290020524047860,0.289063495738880,0.288107709371816,0.287153167196825,0.286199871461133,0.285247824409034,0.284297028281880,0.283347485318079,0.282399197753089,0.281452167819413,0.280506397746591,0.279561889761199,0.278618646086841,0.277676668944144,0.276735960550756,0.275796523121334,0.274858358867545,0.273921469998060,0.272985858718544,0.272051527231657,0.271118477737045,0.270186712431336,0.269256233508134,0.268327043158017,0.267399143568527,0.266472536924167,0.265547225406397,0.264623211193629,0.263700496461219,0.262779083381465,0.261858974123600,0.260940170853787,0.260022675735115,0.259106490927593,0.258191618588147,0.257278060870609,0.256365819925721,0.255454897901121,0.254545296941344,0.253637019187815,0.252730066778842,0.251824441849615,0.250920146532197,0.250017182955523,0.249115553245391,0.248215259524458,0.247316303912238,0.246418688525094,0.245522415476232,0.244627486875699,0.243733904830379,0.242841671443983,0.241950788817048,0.241061259046931,0.240173084227803,0.239286266450646,0.238400807803249,0.237516710370197,0.236633976232875,0.235752607469455,0.234872606154897,0.233993974360939,0.233116714156098,0.232240827605658,0.231366316771674,0.230493183712959,0.229621430485082,0.228751059140365,0.227882071727877,0.227014470293427,0.226148256879562,0.225283433525563,0.224420002267436,0.223557965137911,0.222697324166434,0.221838081379167,0.220980238798979,0.220123798445442,0.219268762334827,0.218415132480099,0.217562910890914,0.216712099573610,0.215862700531207,0.215014715763399,0.214168147266551,0.213322997033692,0.212479267054515,0.211636959315368,0.210796075799250,0.209956618485809,0.209118589351331,0.208281990368746,0.207446823507612,0.206613090734118,0.205780794011075,0.204949935297915,0.204120516550684,0.203292539722037,0.202466006761236,0.201640919614143,0.200817280223215,0.199995090527502,0.199174352462642,0.198355067960853,0.197537238950933,0.196720867358252,0.195905955104750,0.195092504108931,0.194280516285858,0.193469993547151,0.192660937800979,0.191853350952060,0.191047234901650,0.190242591547545,0.189439422784075,0.188637730502095,0.187837516588986,0.187038782928649,0.186241531401500,0.185445763884464,0.184651482250974,0.183858688370964,0.183067384110867,0.182277571333607,0.181489251898597,0.180702427661736,0.179917100475401,0.179133272188446,0.178350944646196,0.177570119690441,0.176790799159436,0.176012984887892,0.175236678706977,0.174461882444306,0.173688597923940,0.172916826966381,0.172146571388567,0.171377833003870,0.170610613622089,0.169844915049447,0.169080739088586,0.168318087538566,0.167556962194855,0.166797364849330,0.166039297290269,0.165282761302351,0.164527758666647,0.163774291160618,0.163022360558114,0.162271968629363,0.161523117140972,0.160775807855923,0.160030042533564,0.159285822929612,0.158543150796142,0.157802027881587,0.157062455930733,0.156324436684713,0.155587971881008,0.154853063253435,0.154119712532152,0.153387921443645,0.152657691710731,0.151929025052551,0.151201923184565,0.150476387818549,0.149752420662593,0.149030023421093,0.148309197794750,0.147589945480565,0.146872268171834,0.146156167558148,0.145441645325381,0.144728703155697,0.144017342727536,0.143307565715615,0.142599373790924,0.141892768620721,0.141187751868528,0.140484325194129,0.139782490253563,0.139082248699122,0.138383602179346,0.137686552339022,0.136991100819176,0.136297249257073,0.135604999286209,0.134914352536311,0.134225310633332,0.133537875199445,0.132852047853043,0.132167830208733,0.131485223877330,0.130804230465858,0.130124851577543,0.129447088811810,0.128770943764279,0.128096418026763,0.127423513187260,0.126752230829954,0.126082572535208,0.125414539879564,0.124748134435735,0.124083357772602,0.123420211455214,0.122758697044780,0.122098816098667,0.121440570170399,0.120783960809647,0.120128989562232,0.119475657970117,0.118823967571405,0.118173919900336,0.117525516487282,0.116878758858744,0.116233648537349,0.115590187041844,0.114948375887098,0.114308216584090,0.113669710639914,0.113032859557770,0.112397664836961,0.111764127972893,0.111132250457066,0.110502033777077,0.109873479416609,0.109246588855435,0.108621363569410,0.107997805030467,0.107375914706616,0.106755694061941,0.106137144556594,0.105520267646791,0.104905064784813,0.104291537419000,0.103679686993744,0.103069514949493,0.102461022722742,0.101854211746031,0.101249083447943,0.100645639253098,0.100043880582152,0.0994438088517936,0.0988454254747390,0.0982487318597298,0.0976537294115297,0.0970604195309207,0.0964688036147002,0.0958788830556777,0.0952906592426712,0.0947041335605043,0.0941193073900028,0.0935361821079912,0.0929547590872900,0.0923750396967121,0.0917970253010593,0.0912207172611198,0.0906461169336646,0.0900732256714440,0.0895020448231852,0.0889325757335881,0.0883648197433234,0.0877987781890281,0.0872344524033033,0.0866718437147108,0.0861109534477698,0.0855517829229539,0.0849943334566882,0.0844386063613457,0.0838846029452448,0.0833323245126460,0.0827817723637482,0.0822329477946867,0.0816858520975298,0.0811404865602751,0.0805968524668473,0.0800549510970948,0.0795147837267867,0.0789763516276098,0.0784396560671658,0.0779046983089682,0.0773714796124389,0.0768400012329060,0.0763102644216004,0.0757822704256527,0.0752560204880908,0.0747315158478365,0.0742087577397026,0.0736877473943904,0.0731684860384863,0.0726509748944595,0.0721352151806585,0.0716212081113082,0.0711089548965080,0.0705984567422279,0.0700897148503061,0.0695827304184462,0.0690775046402143,0.0685740387050360,0.0680723337981941,0.0675723911008253,0.0670742117899179,0.0665777970383082,0.0660831480146788,0.0655902658835553,0.0650991518053033,0.0646098069361262,0.0641222324280622,0.0636364294289816,0.0631523990825844,0.0626701425283968,0.0621896609017694,0.0617109553338742,0.0612340269517020,0.0607588768780593,0.0602855062315664,0.0598139161266542,0.0593441076735618,0.0588760819783339,0.0584098401428181,0.0579453832646624,0.0574827124373125,0.0570218287500093,0.0565627332877865,0.0561054271314677,0.0556499113576639,0.0551961870387716,0.0547442552429693,0.0542941170342155,0.0538457734722465,0.0533992256125733,0.0529544745064792,0.0525115212010179,0.0520703667390104,0.0516310121590428,0.0511934584954639,0.0507577067783825,0.0503237580336656,0.0498916132829351,0.0494612735435661,0.0490327398286841,0.0486060131471631,0.0481810945036226,0.0477579848984256,0.0473366853276760,0.0469171967832168,0.0464995202526274,0.0460836567192208,0.0456696071620421,0.0452573725558659,0.0448469538711939,0.0444383520742526,0.0440315681269911,0.0436266029870790,0.0432234576079036,0.0428221329385686,0.0424226299238907,0.0420249495043986,0.0416290926163295,0.0412350601916281,0.0408428531579436,0.0404524724386278,0.0400639189527329,0.0396771936150097,0.0392922973359043,0.0389092310215576,0.0385279955738017,0.0381485918901588,0.0377710208638384,0.0373952833837357,0.0370213803344289,0.0366493125961779,0.0362790810449217,0.0359106865522765,0.0355441299855334,0.0351794122076569,0.0348165340772823,0.0344554964487139,0.0340963001719231,0.0337389460925464,0.0333834350518831,0.0330297678868938,0.0326779454301979,0.0323279685100720,0.0319798379504478,0.0316335545709104,0.0312891191866959,0.0309465326086901,0.0306057956434261,0.0302669090930823,0.0299298737554812,0.0295946904240868,0.0292613598880031,0.0289298829319724,0.0286002603363727,0.0282724928772168,0.0279465813261498,0.0276225264504479,0.0273003290130159,0.0269799897723857,0.0266615094827148,0.0263448888937842,0.0260301287509964,0.0257172297953744,0.0254061927635594,0.0250970183878089,0.0247897073959955,0.0244842605116048,0.0241806784537341,0.0238789619370900,0.0235791116719875,0.0232811283643481,0.0229850127156973,0.0226907654231647,0.0223983871794805,0.0221078786729752,0.0218192405875771,0.0215324736028114,0.0212475783937980,0.0209645556312503,0.0206834059814737,0.0204041301063635,0.0201267286634037,0.0198512023056658,0.0195775516818064,0.0193057774360664,0.0190358802082694,0.0187678606338197,0.0185017193437013,0.0182374569644764,0.0179750741182836,0.0177145714228365,0.0174559494914228,0.0171992089329020,0.0169443503517045,0.0166913743478300,0.0164402815168466,0.0161910724498882,0.0159437477336544,0.0156983079504085,0.0154547536779760,0.0152130854897437,0.0149733039546579,0.0147354096372232,0.0144994030975016,0.0142652848911102,0.0140330555692211,0.0138027156785593,0.0135742657614014,0.0133477063555747,0.0131230379944559,0.0129002612069696,0.0126793765175869,0.0124603844463251,0.0122432855087450,0.0120280802159511,0.0118147690745896,0.0116033525868474,0.0113938312504509,0.0111862055586648,0.0109804760002912,0.0107766430596680,0.0105747072166681,0.0103746689466980,0.0101765287206973,0.00998028700513656,0.00978594426201714,0.00959350094886975,0.00940295751875315,0.00921431442025361,0.00902757209748325,0.00884273099007945,0.00865979153320360,0.00847875415754037,0.00829961928929616,0.00812238735019849,0.00794705875749488,0.00777363392395215,0.00760211325785488,0.00743249716300502,0.00726478603872046,0.00709898027983449,0.00693508027669470,0.00677308641516190,0.00661299907660965,0.00645481863792276,0.00629854547149697,0.00614417994523779,0.00599172242255960,0.00584117326238493,0.00569253281914353,0.00554580144277157,0.00540097947871083,0.00525806726790768,0.00511706514681283,0.00497797344737987,0.00484079249706491,0.00470552261882560,0.00457216413112043,0.00444071734790828,0.00431118257864708,0.00418356012829367,0.00405785029730248,0.00393405338162551,0.00381216967271119,0.00369219945750366,0.00357414301844235,0.00345800063346119,0.00334377257598789,0.00323145911494347,0.00312106051474126,0.00301257703528694,0.00290600893197719,0.00280135645569953,0.00269861985283165,0.00259779936524082,0.00249889523028330,0.00240190768080363,0.00230683694513448,0.00221368324709560,0.00212244680599386,0.00203312783662225,0.00194572654925956,0.00186024314967001,0.00177667783910237,0.00169503081429014,0.00161530226745033,0.00153749238628368,0.00146160135397370,0.00138762934918665,0.00131557654607064,0.00124544311425589,0.00117722921885376,0.00111093502045636,0.00104656067513665,0.000984106334447628,0.000923572145422241,0.000864958250572829,0.000808264787890957,0.000753491890846861,0.000700639688389546,0.000649708304946056,0.000600697860421385,0.000553608470198207,0.000508440245136418,0.000465193291573322,0.000423867711322722,0.000384463601675191,0.000346981055397804,0.000311420160733680,0.000277781001401895,0.000246063656597298,0.000216268200990331,0.000188394704726758,0.000162443233427661,0.000138413848189357,0.000116306605582663,9.61215576537197e-05,7.78587519228999e-05,6.15182313854441e-05,4.71000345110069e-05,3.46041952433853e-05,2.40307430009719e-05,1.53797026763921e-05,8.65109463605109e-06,3.84493472104014e-06,9.61234245958253e-07,0};

short N = 2048 * 2;
long mean_long = 0;
short mean_short = 0;

double tempcarrierarray[51];
double tempsidearray[51];
double AMP23 = 29.64;//53.41;//60.8;//4.3;//60.8;//52;//78.9264;
double AMP2 = 6.05;

double involt_power = 0.29 * 0.29 / 2;

int state;
int state1;
int ab;
byte flag = 0;      //makes sure that the serial only prints once the state

unsigned char test;
int autogainres[80];


double Ic = 0;
double Is = 0;
double corrected_Is = 0;
double Ic_original[80];

double Is_original[80];
double Rf_Cf_side = 2485;
double Rf_Cf_carrier = 2488;
double Vc_acq_rms = 0;
double Vs_acq_rms = 0;
double involt_rms = 0.2021;

double CF = 0;
double k = 5;//2.87; //7.8
double mr0[80];
double deltamr;

long wint = 0;
long wmax = 0;
long wmin = 0;
int row = 0;
int col = 0;
int count = 0;
unsigned short int data = 0;

BYTE target = 0;
BYTE sampling = 0;
int res;
unsigned long int wrange[16];
int wrangesmallest;

unsigned short int w1 = 0;

//int b=0;


//byte rowarray[] = {3, 7, 1, 5, 2, 6, 8, 9, 0, 4}; // MY CARTRIDGE _ for mari detection
byte rowToMux[] = {7, 5, 6, 9, 4, 0, 8, 2, 1, 3};
byte colarray[] = {0, 1, 2, 3, 4, 5, 6, 7}; // MY CARTRIDGE


int rown = 0;
int coln = 0;

bool autogain = false;

int rowncoln = 0;
bool faulty[16];
bool faultysensor = true ;
int buffer_int1 = 0;

int buffer_test = 0;
int counting = 0;
BYTE ToSendDataBuffer1[160];

unsigned long int w;

////////////////////////////Analog Functions/////////////////////////
void SPI_COIL_SEND(unsigned short int data) //WORD is 2bytes = 16bit
{
  char a = 15;
  unsigned short int b;
  BYTE c = 0;
  digitalWrite(FS_Coil, HIGH);
  for (ab = 0; ab < 1000; ab++);
  digitalWrite(SCLK_SIGSYN, HIGH);
  for (ab = 0; ab < 1000; ab++);
  digitalWrite(FS_Coil, LOW);
  for (ab = 0; ab < 1000; ab++);
  for (int a = 15; a > -1; a--)
  {
    for (ab = 0; ab < 1000; ab++);
    b = data >> a;
    for (ab = 0; ab < 1000; ab++);
    c = b & 1;
    for (ab = 0; ab < 1000; ab++);
    digitalWrite(SCLK_SIGSYN, HIGH);
    for (ab = 0; ab < 1000; ab++);
    if (c == 1)
    {
      digitalWrite(SDO_SIGSYN, HIGH);
      //  for(ab = 0; ab < 1000; ab++);
      digitalWrite(SCLK_SIGSYN, LOW);
      //  for(ab = 0; ab < 1000; ab++);
    }
    else
    {
      digitalWrite(SDO_SIGSYN, LOW);
      for (ab = 0; ab < 1000; ab++);
      digitalWrite(SCLK_SIGSYN, LOW);
      for (ab = 0; ab < 1000; ab++);
    }

  }
  digitalWrite(FS_Coil, HIGH);
  //for(ab = 0; ab < 1000; ab++);

}

void MULTIPLIER2_on(int a)//row up to down 27360514
{



  // row = a;
  //MULTIENH;

  if ((a & 0b00000001) == 1)
  {
    digitalWrite(MUX_A0, HIGH);
  }
  else
  {
    digitalWrite(MUX_A0, LOW);
  }

  if ((a & 0b00000010) == 0b00000010)
  {
    digitalWrite(MUX_B0, HIGH);
  }
  else
  {
    digitalWrite(MUX_B0, LOW);
  }

  if ((a & 0b00000100) == 0b00000100)
  {
    digitalWrite(MUX_C0, HIGH);
  }
  else
  {
    digitalWrite(MUX_C0, LOW);
  }

  if ((a & 0b00001000) == 0b00001000)
  {
    digitalWrite(MUX_D0, HIGH);
  }
  else
  {
    digitalWrite(MUX_D0, LOW);
  }


}
void MULTIPLIER1_on(int a)//column left to right
{



  if ((a & 0b00000001) == 1)
  {
    digitalWrite(MUX_A1, HIGH);
  }
  else
  {
    digitalWrite(MUX_A1, LOW);
  }

  if ((a & 0b00000010) == 0b00000010)
  {
    digitalWrite(MUX_B1, HIGH);
  }
  else
  {
    digitalWrite(MUX_B1, LOW);
  }

  if ((a & 0b00000100) == 0b00000100)
  {
    digitalWrite(MUX_C1, HIGH);
  }
  else
  {
    digitalWrite(MUX_C1, LOW);
  }
}

void AUTOGAINMUX_on(int a)
{



  if ((a & 0b00000001) == 1)
  {
    digitalWrite(AUTOGAINA0, HIGH);
  }
  else
  {
    digitalWrite(AUTOGAINA0, LOW);
  }

  if ((a & 0b00000010) == 0b00000010)
  {
    digitalWrite(AUTOGAINA1, HIGH);
  }
  else
  {
    digitalWrite(AUTOGAINA1, LOW);
  }

  if ((a & 0b00000100) == 0b00000100)
  {
    digitalWrite(AUTOGAINA2, HIGH);
  }
  else
  {
    digitalWrite(AUTOGAINA2, LOW);
  }

  if ((a & 0b00001000) == 0b00001000)
  {
    digitalWrite(AUTOGAINA3, HIGH);
  }
  else
  {
    digitalWrite(AUTOGAINA3, LOW);
  }
}




void SPI_GMR1_SEND(unsigned short int data) //WORD is 2bytes = 16bit
{
  unsigned short int b;
  BYTE c = 0;
  for (ab = 0; ab < 10; ab++);
  digitalWrite(FS_GMR1, HIGH);
  for (ab = 0; ab < 10; ab++);
  digitalWrite(SCLK_SIGSYN, HIGH);
  for (ab = 0; ab < 10; ab++);
  digitalWrite(FS_GMR1, LOW);
  for (ab = 0; ab < 10; ab++);
  for (int a = 15; a > -1; a--)
  {

    for (ab = 0; ab < 10; ab++);
    b = data >> a;
    for (ab = 0; ab < 10; ab++);
    c = b & 1;
    for (ab = 0; ab < 10; ab++);


    if (c == 1)
    {
      digitalWrite(SCLK_SIGSYN, HIGH);
      for (ab = 0; ab < 10; ab++);
      digitalWrite(SDO_SIGSYN, HIGH);
      for (ab = 0; ab < 10; ab++);
      digitalWrite(SCLK_SIGSYN, LOW);
      for (ab = 0; ab < 10; ab++);
    }
    else
    {
      digitalWrite(SCLK_SIGSYN, HIGH);
      for (ab = 0; ab < 10; ab++);
      digitalWrite(SDO_SIGSYN, LOW);
      for (ab = 0; ab < 10; ab++);
      digitalWrite(SCLK_SIGSYN, LOW);
      for (ab = 0; ab < 10; ab++);
    }
  }
  digitalWrite(FS_GMR1, HIGH);
  for (ab = 0; ab < 10; ab++);
}

unsigned long int SPI_ADC_RECEIVE(void) //WORD is 2bytes = 16bit
{
 dummy_data = 0;
 dummy_a = 0;

  digitalWriteDirect(CNV,HIGH);
  digitalWriteDirect(CNV,LOW);

  //BUSY PIN SHOULD BE ACQUID, READ SDI_ADC AT THE RISING EDGE OF SCK
  while ( (digitalReadDirect(BUSY)) == 1); //INT? ==1, BUSY?==0

  while (dummy_a < 19)
  {
    dummy_data = dummy_data + digitalRead(ADC_SDI); // digitalReadDirect(ADC_SDI);
    digitalWriteDirect(ADC_SCK,LOW);
    dummy_data = dummy_data << 1;
    digitalWriteDirect(ADC_SCK,HIGH);
    dummy_a++;
  }
  dummy_data = dummy_data + digitalRead(ADC_SDI);
  digitalWriteDirect(ADC_SCK,LOW);
  digitalWriteDirect(ADC_SCK,HIGH);

  return dummy_data;

}

inline void digitalWriteDirect(int pin, boolean val){
  if(val) g_APinDescription[pin].pPort -> PIO_SODR = g_APinDescription[pin].ulPin;
  else    g_APinDescription[pin].pPort -> PIO_CODR = g_APinDescription[pin].ulPin;
}
inline int digitalReadDirect(int pin){
  return !!(g_APinDescription[pin].pPort -> PIO_PDSR & g_APinDescription[pin].ulPin);
}

void FFTAnalysis(float* FTvl, long* AVal, int Nvl, int Nft) {  //Nft is number of array // Nvl number of input
  double TwoPi = 6.283185307179586;
  int i, j, n, m, Mmax, Istp;
  double Tmpr, Tmpi, Wtmp, Theta;
  double Wpr, Wpi, Wr, Wi;
  n = Nvl * 2;

  float Tmvl[n];
  //      static float FTvl[2048];

  for (i = 0; i < Nvl; i++) {
    j = i * 2; Tmvl[j] = 0; Tmvl[j + 1] = *(AVal + i);
  }

  i = 1; j = 1;
  while (i < n) {
    if (j > i) {
      Tmpr = Tmvl[i]; Tmvl[i] = Tmvl[j]; Tmvl[j] = Tmpr;
      Tmpr = Tmvl[i + 1]; Tmvl[i + 1] = Tmvl[j + 1]; Tmvl[j + 1] = Tmpr;
    }
    i = i + 2; m = Nvl;
    while ((m >= 2) && (j > m)) {
      j = j - m; m = m >> 1;
    }
    j = j + m;
  }

  Mmax = 2;
  while (n > Mmax) {
    Theta = -TwoPi / Mmax; Wpi = sin(Theta);
    Wtmp = sin(Theta / 2); Wpr = Wtmp * Wtmp * 2;
    Istp = Mmax * 2; Wr = 1; Wi = 0; m = 1;

    while (m < Mmax) {
      i = m; m = m + 2; Tmpr = Wr; Tmpi = Wi;
      Wr = Wr - Tmpr * Wpr - Tmpi * Wpi;
      Wi = Wi + Tmpr * Wpi - Tmpi * Wpr;

      while (i < n) {
        j = i + Mmax;
        Tmpr = Wr * Tmvl[j] - Wi * Tmvl[j - 1];
        Tmpi = Wi * Tmvl[j] + Wr * Tmvl[j - 1];

        Tmvl[j] = Tmvl[i] - Tmpr; Tmvl[j - 1] = Tmvl[i - 1] - Tmpi;
        Tmvl[i] = Tmvl[i] + Tmpr; Tmvl[i - 1] = Tmvl[i - 1] + Tmpi;
        i = i + Istp;
      }
    }

    Mmax = Istp;
  }

  for (i = 0; i < Nft; i++) {
    j = i * 2; FTvl[Nft - i - 1] = (float) sqrt((Tmvl[j] * Tmvl[j]) + (Tmvl[j + 1] * Tmvl[j + 1]));
  }
  //   return FTvl;

}

void sort(double *a, int siz) {
  for (int i = 0; i < (siz - 1); i++) {
    for (int ii = 0; ii < (siz - (i + 1)); ii++) {
      if (a[ii] > a[ii + 1]) {
        double t = a[ii];
        a[ii] = a[ii + 1];
        a[ii + 1] = t;
      }
    }
  }
}

//////////////////// Digital Constants///////////////////////

#include <SPI.h>
#include <SD.h>
#include <genieArduino.h>
#include <Adafruit_CC3000.h>
#include <ccspi.h>
#include <string.h>
#include "utility/debug.h"
#include <PS2Keyboard.h>


Genie genie;

int BSA = 0;
int THC = 1;
int BIOTIN = 2;
int EMPTY = 3;
int sensorType = EMPTY;
int sensorCount = 80;
//int timePoints = 4;
int sensors[80]; //stores 0 for BSA, 1 for THC, 2 for BIOTIN, 3 for EMPTY
int sensorValues[80];//most recent sensor reading
int numActiveSensors;
void initializeSensors();
bool timerExpired = true;
int timerValue = 0;

String userName = "";
String firstName = "";
String middleName = "";
String lastName = "";
String expID = "";
String deviceID = "";
String filename = "";

const int chipSelect = 4;

File dataFile;
File readFile;
File info;


///////////////////////////wifi//////////////////////////////


// These are the interrupt and control pins
#define ADAFRUIT_CC3000_IRQ   3  // MUST be an interrupt pin!
// These can be any two pins
#define ADAFRUIT_CC3000_VBAT  5
#define ADAFRUIT_CC3000_CS    10

Adafruit_CC3000 cc3000 = Adafruit_CC3000(ADAFRUIT_CC3000_CS, ADAFRUIT_CC3000_IRQ, ADAFRUIT_CC3000_VBAT, SPI_CLOCK_DIVIDER); // you can change this clock speed

#define WLAN_SSID       "tyler's iPhone (2)"           // cannot be longer than 32 characters!
#define WLAN_PASS       "sensilabs"
// Security can be WLAN_SEC_UNSEC, WLAN_SEC_WEP, WLAN_SEC_WPA or WLAN_SEC_WPA2
#define WLAN_SECURITY   WLAN_SEC_WPA2

#define IDLE_TIMEOUT_MS  3000      // Amount of time to wait (in milliseconds) with no data 
                                   // received before closing the connection.  If you know the server
                                   // you're accessing is quick to respond, you can reduce this value.

// What page to grab!

//#define WEBSITE      "data.sparkfun.com"
//#define WEBPAGE      "/output/aGOxVAX7VWs3331azdRo.csv"
//char server[] = "data.sparkfun.com";

#define WEBSITE      "sensimetrics.herokuapp.com"
//#define WEBPAGE      "/output/aGOxVAX7VWs3331azdRo.csv"
char server[] = "data.sparkfun.com";

//const String publicKey = "aGOxVAX7VWs3331azdRo";
//const String privateKey = "KEox5am150FzzzRV6Jrv";

const byte NUM_FIELDS = 3;
const String fieldNames[NUM_FIELDS] = {"bsa", "thc", "biotin"};
int fieldData[NUM_FIELDS];


uint32_t ip;
///////////////////////end wifi///////////////////////////////

///////////////////////ID card swipe/////////////////////

const int DataPin = 8;
const int IRQpin =  9;
PS2Keyboard keyboard;


void setup()
{
/////////////////////////////////Analog Set up////////////////
  
  pinMode(MUX_C1, OUTPUT);
  pinMode(MUX_B1, OUTPUT);
  pinMode(PAENABLE, OUTPUT);
  pinMode(MOTOR_CONTROL, OUTPUT);
  pinMode(MUX_B0, OUTPUT);
  pinMode(PA_switch, OUTPUT);
  pinMode(FS_GMR1, OUTPUT);
  pinMode(FS_Coil, OUTPUT);
  pinMode(AUTOGAINA3, OUTPUT);
  pinMode(AUTOGAINA2, OUTPUT);
  pinMode(ADC_SCK, OUTPUT);
  pinMode(MUX_A0, OUTPUT);
  pinMode(MUX_C0, OUTPUT);
  pinMode(MUX_D0, OUTPUT);
  pinMode(MUX_A1, OUTPUT);
  pinMode(AUTOGAINA0, OUTPUT);
  pinMode(AUTOGAINA1, OUTPUT);
  pinMode(SCLK_SIGSYN, OUTPUT);
  pinMode(SDO_SIGSYN, OUTPUT);

  pinMode(ADC_SDI, INPUT);
  pinMode(BUSY, INPUT);
  pinMode(CNV,OUTPUT);
 
  SPI_GMR1_SEND(0x2000); //original
  SPI_GMR1_SEND(0x60B7);
  SPI_GMR1_SEND(0x4001);
  SPI_GMR1_SEND(0xC000);
  SPI_GMR1_SEND(0x2000);

  SPI_COIL_SEND(0x2000);  // 
  SPI_COIL_SEND(0x58BB);  // 
  SPI_COIL_SEND(0x4000);  // 
  SPI_COIL_SEND(0xC000);  // 
  SPI_COIL_SEND(0x2000);  // 

  digitalWrite(PA_switch, HIGH); //low field

  digitalWrite(MOTOR_CONTROL,LOW);

  
/////////////////////////////////////////Digital Setup////////////////////////////////
  
  // make sure that the default chip select pin is set to
  // output, even if you don't use it:
  pinMode(SS, OUTPUT);
  
  
  Serial.begin(115200);  // Serial0 @ 200000 (200K) Baud
  genie.Begin(Serial);   

  genie.AttachEventHandler(myGenieEventHandler); // Attach the user function Event Handler for processing events

  delay (5000); //let the display start up after the reset (This is important)
  
  
  int wifi_SD_switch = 2;
  pinMode(wifi_SD_switch, OUTPUT); // wifi SD switch
  digitalWrite(wifi_SD_switch, HIGH);
  
 
  //Turn the Display on (Contrast))
  genie.WriteContrast(10); // 0 = black 15= brightest
  
  initializeSensors();

  keyboard.begin(DataPin, IRQpin);
  
  bool IDswipe = false;
  bool nameStart = false;
  int whichName = 0;

  genie.WriteStr(3, F("Swipe ID card \n when ready!"));
  
  while(!IDswipe){
//    genie.WriteStr(3, "Waiting for card data");
    if (keyboard.available()) {
      
//      genie.WriteStr(3, "keyboard available");
      
      char c = keyboard.read();

      if(nameStart  && c != '^'){
        if(c == '$'){whichName++;}
        else if(whichName == 0){lastName += c;}
        else if(whichName == 1){firstName += c;}
        else if(whichName == 2){middleName += c;}
      }
      
      if(c == '^'){
        if(!nameStart){nameStart = true;}
        else{IDswipe = true;}
      }
    }
  }

  userName = firstName+ " "+middleName+ " " + lastName;
  char userNameChar[userName.length() + 1];
  userName.toCharArray(userNameChar, userName.length() + 1);

  digitalWrite(10, LOW);
//  genie.WriteStr(3, userNameChar);

  
    // see if the card is present and can be initialized:
  if (!SD.begin(chipSelect)) {
    genie.WriteStr(3, F("SD wont begin, 10 low"));
    while (1) ;
  }
  
// open info file to get expID and device ID
  info = SD.open("info.csv");
  char c = info.read();
  while(c != ','){
    deviceID += c;
    c = info.read();
  }
  while(info.available()){
    c = info.read();
    expID += c;
  }


  int expID_int = expID.toInt() + 1; //add one to previous expID
  expID = String(expID_int);
  filename = expID + ".csv";
  
  info.close();
  SD.remove("info.csv");

  genie.WriteStr(3, userName + "\n Experiment ID: " + expID);
  
  info = SD.open("info.csv", FILE_WRITE);
  String infoString = deviceID + "," + expID;
  info.print(infoString);
  info.close();

  dataFile = SD.open(filename, FILE_WRITE);
  if (! dataFile) {
    genie.WriteStr(3, F("could not open csv file"));
    // Wait forever since we cant write data
    while (1) ;
  }

  //Write header on csv file. create experiment ID.
  String header = userName + "," + expID;
  dataFile.println(header);

    
}

//Set all sensors to Type = EMPTY and current value to 0.
void initializeSensors(){
  for(int i = 0; i < sensorCount; i++){
    sensors[i] = 3;
    sensorValues[i] = 0;
  }
}

//write a line of data to the csv file on the sd card
void writeData(int timePoint, int timerValue, int sensor, int sensorValue){

  String dataString = "";
  dataString += (timePoint);//+1 because analysis is done in Rstudio, which is 1 indexed
  dataString += ",";
  dataString += (timerValue);
  dataString += ",";
  dataString += (sensor);
  dataString += ",";
  String sensorTypeString = "";
  
  if(sensorType == BSA){sensorTypeString = "BSA";}
  else if(sensorType == THC){sensorTypeString = "THC";}
  else if(sensorType == BIOTIN){sensorTypeString = "BIOTIN";}
  
  dataString += sensorTypeString;
  dataString += ",";
  dataString += (sensorValue);
  
  dataFile.println(dataString);
  dataFile.flush();   
}


void loop()
{

  static long waitPeriod = millis();
  genie.DoEvents(); // This calls the library each loop to process the queued responses from the display

  if (millis() >= waitPeriod)
  {
    waitPeriod = millis() + 50; // rerun this code to update Cool Gauge and Slider in another 50ms time.
  }
}

void myGenieEventHandler(void){
  
  genieFrame Event;
  genie.DequeueEvent(&Event);


  //If the cmd received is from a Reported Event (Events triggered from the Events tab of Workshop4 objects)
  if (Event.reportObject.cmd == GENIE_REPORT_EVENT)
  {
    
    if(Event.reportObject.object == GENIE_OBJ_WINBUTTON){
      if(Event.reportObject.index == 0){
        genie.WriteObject(GENIE_OBJ_FORM, 1, 0);
      }
      if(Event.reportObject.index < 5 && Event.reportObject.index > 0){
        sensorType = Event.reportObject.index - 1; 
      }
      if(Event.reportObject.index == 5){ // Set Layout Button
        genie.WriteObject(GENIE_OBJ_FORM, 2, 0);  
     
      }
      if(Event.reportObject.index == 7){ //start experiment button

         for (int a = 0; a < 80; a++){ //State 99 initialize arrays
           mr0[a] = 0;
           Ic_original[a] = 0;
           Is_original[a] = 0;
           table[a] = 0;
         }
         mr_cal = 0;

        matchResistances();//State 1

        int readCount = 0;    
        long waitPeriod, startMillis = millis();
        timerExpired = false;
        String calibrationString = "";
        int percent = 0;
        

        dataFile.println("Iteration,Time,Sensor,Type,Value");

        while(!timerExpired){
//          if(millis()>waitPeriod){
            timerValue = (millis()-startMillis)/1000;
            genie.WriteStr(3, F(" "));//for some bizzare reason, need this in order for timer to stop when stop button is pressed
            int minutes = timerValue/60;
            int seconds = timerValue%60;
            int timerDisplay = minutes*100+seconds;
            genie.WriteObject(GENIE_OBJ_LED_DIGITS, 0, timerDisplay);
            waitPeriod +=1000;//1 sec
            calcMeanValues();
//          }
          genie.DoEvents();
          
          if(readCount < sensorCount && sensors[readCount%80] != EMPTY){
//          if(readCount < sensorCount){
            mr_cal = 0;
            digitalWrite(PA_switch, HIGH);//Low field
            percent = readCount*100/sensorCount;
            calibrationString = "First read is: \n" + String(percent) + "% Complete";
            genie.WriteStr(4, calibrationString);
            collectSensorValue(readCount);
          }
          
          else if(readCount < 2*sensorCount && sensors[readCount%80] != EMPTY){
            mr_cal = 1;
            digitalWrite(PA_switch, LOW);//HIGH field
            
            percent = (readCount - sensorCount)*100/sensorCount;
            calibrationString = "Second read is: \n" + String(percent) + "% Complete";
            genie.WriteStr(4, calibrationString);
            collectSensorValue(readCount);
          }else {
            mr_cal = 0;
            collectSensorValue(readCount);
          }
          
          readCount++;
        }

      }
      if(Event.reportObject.index == 6){// stop experiment button
        genie.WriteStr(4, F("stop pressed"));
        dataFile.close();
        timerExpired = true;
      
      }
      if(Event.reportObject.index == 8){// stop experiment button
      timerExpired = true;
//      SD.end();
      sendDataWifi();
    
      }
      
      
      
    }
    if (Event.reportObject.object == GENIE_OBJ_USERBUTTON){      
      updateLayout(Event.reportObject.index, sensorType); 
    }
  }

}

//both set the correct sensor color on the LED display and update our sensor (type) array
void updateLayout(int index, int type){
  int BSAindex = index;
  int THCindex = index + sensorCount*THC;
  int BIOindex = index + sensorCount*BIOTIN;
  int selectedLED = index + sensorCount*type;

  
    //set all to off (display grey)
  genie.WriteObject(GENIE_OBJ_USER_LED, BSAindex, 0);
  genie.WriteObject(GENIE_OBJ_USER_LED, THCindex, 0);
  genie.WriteObject(GENIE_OBJ_USER_LED, BIOindex, 0);
  
  if(type != EMPTY){// display color if not EMPTY
    genie.WriteObject(GENIE_OBJ_USER_LED, selectedLED, 1);
    if(sensors[index] == EMPTY){ //only add to numActiveSensors if previous type was EMPTY 
      numActiveSensors++;
    }
  }else if(sensors[index] != EMPTY){ //only subtract from numActiveSensors if previous type was not EMPTY
    numActiveSensors--;
  }
  
  sensors[index] = type;
}
  

void collectSensorValue(int readCount){

  int sensor = readCount%80;
  sensorType = sensors[sensor];
  if(sensorType == EMPTY){return;}

  int timePoint = readCount/80;

  int row = (int)(sensor / 8);
  int col = sensor - 8*row;

  AUTOGAINMUX_on(autogainres[sensor]);

  int muxRow = rowToMux[row];
  int muxCol = colarray[col];

  MULTIPLIER1_on(muxCol);
  MULTIPLIER2_on(muxRow);

//  int sensorValue = (sensorType + 1)*sensor*(1-pow(2.3, -0.008*timerValue));//generate simulated data

  delay(100);
  {

    for (int a = 0; a < 10; a++)
    {
      w = SPI_ADC_RECEIVE();
      AVal[a] = w;
    }
    
    for (int a = 0; a < N; a++) // N = 2^12 data points
    {
      w = SPI_ADC_RECEIVE();
      AVal[a] = w;
    }
    
    for (int a = 0; a < N; a++) //
    {
      if(AVal[a] >= 524288 )
      {
        AVal[a] = AVal[a]- 1048576;
      }                  
    }
    
    int mean_long = 0;
    for (int ii = 0; ii < N; ii++)
    {
      mean_long = AVal[ii] + mean_long; //sum up
    }
    mean_long=  (mean_long / N); //get mean

    for (int ii = 0; ii < N; ii++)
    {
      AVal[ii] = ( (AVal[ii] - mean_long) * hann[ii] );
    }

    FFTAnalysis(FTvl, AVal,  Nvl,  Nft);

    for (int i = 0; i < N; i++)
    {
      FTvl[i] = FTvl[i] / N * 10  / 1048576;
    }

    //tracker
    for (int i = 0; i < 51; i++)
    {
      tempcarrierarray[i] =  FTvl[carrierfrequency - 25 + i];
    }

    sort(tempcarrierarray, 51);

    for (int i = 0; i < 51; i++)
    {
      if (tempcarrierarray[50] == FTvl[carrierfrequency - 25 + i])
      {
        tempcarrierfrequency = carrierfrequency - 25 + i;
      }
    }

    for (int i = 0; i < 51; i++)
    {
      tempsidearray[i] =  FTvl[sidefrequency - 25 + i];
    }

    sort(tempsidearray, 51);
    for (int i = 0; i < 51; i++)
    {
      if (tempsidearray[50] == FTvl[sidefrequency - 25 + i])
      {
        tempsidefrequency = sidefrequency - 25 + i;
      }
    }

    for (int i = 0; i < 51; i++)
    {
      tempsidearray[i] =  FTvl[sidefrequency2 - 25 + i];
    }

    sort(tempsidearray, 51);
    for (int i = 0; i < 51; i++)
    {
      if (tempsidearray[50] == FTvl[sidefrequency2 - 25 + i])
      {
        tempsidefrequency2 = sidefrequency2 - 25 + i;
      }
    }
  }

  carriermul = FTvl[tempcarrierfrequency] * FTvl[tempcarrierfrequency];
  for (int i = 1; i < freq_bin ; i++)
  {
    carriermul =  carriermul + FTvl[tempcarrierfrequency + i] * FTvl[tempcarrierfrequency + i] + FTvl[tempcarrierfrequency - i] * FTvl[tempcarrierfrequency - i];
  }

  sidemul = FTvl[tempsidefrequency] * FTvl[tempsidefrequency];
  for (int i = 1; i < side_bin1; i++)
  {
    sidemul = sidemul + FTvl[tempsidefrequency + i] * FTvl[tempsidefrequency + i] + FTvl[tempsidefrequency - i] * FTvl[tempsidefrequency - i];
  }


  sidemul2 = FTvl[tempsidefrequency2] * FTvl[tempsidefrequency2];
  for (int i = 1; i < side_bin2; i++)
  {
    sidemul2 =  sidemul2 + FTvl[tempsidefrequency2 + i] * FTvl[tempsidefrequency2 + i] + FTvl[tempsidefrequency2 - i] * FTvl[tempsidefrequency2 - i];
  }

  sidemul = (sidemul + sidemul2) / 2;



  Ic =  involt_rms * AMP1[sensor]   + sqrt((double)(2 * (carriermul))) / AMP23; // / AMP1[row * 8 + col]  ;
  Is =  sqrt( 2 * (sidemul ) ) / AMP23;// / AMP1[row * 8 + col] ;


  if (table[sensor] == 0)
  {
    table[sensor] = 1;
    Ic_original[sensor] = (double)Ic;
    Is_original[sensor] = (double)Is;
    mr0[sensor] = (double)(((Ic_original[sensor] + 2 * Is_original[sensor] ) / (Ic_original[sensor] - 2 * Is_original[sensor] ) - 1) * 1000000);

  }


  CF =  (double)(1 / (1 + k * (Ic / Ic_original[sensor] - 1) ));
  corrected_Is = (double)(Is * CF);

  if (mr_cal == 1)
  {
    correctedmr = (( Ic_original[sensor] + 2 * corrected_Is ) / (Ic_original[sensor] - 2 * corrected_Is ) - 1) * 1000000 ;
    deltamr = correctedmr - mr0[sensor]; // always returns 0???
    mr_factor[sensor] = (double)(abs(mrmedian / deltamr));// always returns inf???
//    String mr_factor_str = "deltamr for sensor: " + String(sensor) + " is ";
//    dataFile.println(mr_factor_str);
//    dataFile.println(deltamr);
  }
  else if (mr_cal == 0)
  {
    correctedmr = (( Ic_original[sensor] + 2 * corrected_Is ) / (Ic_original[sensor] - 2 * corrected_Is ) - 1) * 1000000 ;      
    deltamr = mr_factor[sensor]* (correctedmr - mr0[sensor]) ;
  }

  if (deltamr < 29000)
  {
    two_byte_short = (short)(round(deltamr)) + 3000;
  }

  if (two_byte_short < 0)
  {
    two_byte_short = -two_byte_short;
  }


  if (two_byte_short < 32000)
  {
    ToSendDataBuffer1[0] = (byte)two_byte_short;
    ToSendDataBuffer1[1] = (byte)( two_byte_short  >> 8);
  }
  else
  {
    ToSendDataBuffer1[0] = (byte)32000;
    ToSendDataBuffer1[1] = (byte)( 32000  >> 8);
  }

//  int sensorValue = ToSendDataBuffer1[0];
  int sensorValue = two_byte_short;

//  Serial.write(ToSendDataBuffer1, 2);

  sensorValues[sensor]= sensorValue;
  
  writeData(timePoint, timerValue, sensor, sensorValue);
  delay(20);
  
}

void calcMeanValues(){
  int BSAsum = 0;
  int THCsum = 0;
  int BIOTINsum = 0;
  int numBSAsensor = 0;
  int numTHCsensor = 0;
  int numBIOTINsensor = 0;
  
  for(int i = 0; i < sensorCount; i++){
    int type = sensors[i];

    if(type == BSA){
      BSAsum += sensorValues[i];
      numBSAsensor++;
    }
    else if(type == THC){
      THCsum += sensorValues[i];
      numTHCsensor++;
    }
    else if(type == BIOTIN){
      BIOTINsum += sensorValues[i];
      numBIOTINsensor++;
    }
  }

  int BSAmean = BSAsum/numBSAsensor;
  int THCmean = THCsum/numTHCsensor;
  int BIOTINmean = BIOTINsum/numBIOTINsensor;

  String meanString = "Mean: \n";
  String BSAmeanString = meanString + BSAmean;
  String THCmeanString = meanString + THCmean;
  String BIOTINmeanString = meanString + BIOTINmean;

  char BSAmeanChar[BSAmeanString.length() + 1];
  char THCmeanChar[THCmeanString.length() + 1];
  char BIOTINmeanChar[BIOTINmeanString.length() + 1];
  
  BSAmeanString.toCharArray(BSAmeanChar, BSAmeanString.length() + 1);
  THCmeanString.toCharArray(THCmeanChar, THCmeanString.length() + 1);
  BIOTINmeanString.toCharArray(BIOTINmeanChar, BIOTINmeanString.length() + 1);

  genie.WriteStr(BSA, BSAmeanChar);
  genie.WriteStr(THC, THCmeanChar);
  genie.WriteStr(BIOTIN, BIOTINmeanChar);

  fieldData[BSA] = BSAmean;
  fieldData[THC] = THCmean;
  fieldData[BIOTIN] = BIOTINmean;

}

void sendDataWifi(){
 
  int wifiConsol = 4;

  digitalWrite(2, LOW);//??? dont remember why i put that 

  genie.WriteStr(wifiConsol, F("beginning wifi..."));

  if (!cc3000.begin())
  {
    genie.WriteStr(wifiConsol, F("Couldn't begin()! Wifi plugged in?"));
    while(1);
  }
  
  genie.WriteStr(wifiConsol, F("\nAttempting to connect to \n tyler's iPhone (2)")); 

  if (!cc3000.connectToAP(WLAN_SSID, WLAN_PASS, WLAN_SECURITY)) {
    genie.WriteStr(wifiConsol, F("Failed!"));
    while(1);
  }
   
  genie.WriteStr(wifiConsol, F("Connected!"));

  genie.WriteStr(wifiConsol, F("Requesting DHCP..."));
  while (!cc3000.checkDHCP())
  {
    delay(100); // ToDo: Insert a DHCP timeout!
  }  

  
  genie.WriteStr(wifiConsol, F("getHostByName()"));
  // Try looking up the website's IP address
  genie.WriteStr(wifiConsol, F(WEBSITE));
  while (ip == 0) {
    if (! cc3000.getHostByName(WEBSITE, &ip)) {
      genie.WriteStr(wifiConsol, F("Couldn't resolve!"));
    }
  }

  Adafruit_CC3000_Client www = cc3000.connectTCP(ip, 80);
  if (www.connected()) {
    genie.WriteStr(wifiConsol, F("Successfully connected"));

    www.println();
  } else {
    genie.WriteStr(wifiConsol, F("Connection failed"));    
    return;
  }


genie.WriteStr(wifiConsol, F("sending GET request"));

  String getString = "GET /incomingData";
  for(int i = 0; i < NUM_FIELDS; i++){
    getString += "/";
    getString += fieldData[i];
  }

  //add ref
  getString += "/";
  getString += 4;
//  add user
  getString += "/";
  getString += firstName +"%20" +middleName +"%20" + lastName;
  //add experiment_id
  getString += "/";
  getString += expID;
  //add device_id
  getString += "/";
  getString += 1;

  getString += " HTTP/1.1";
  www.println(getString);

  www.println("Host: sensimetrics.herokuapp.com");
  www.println("Connection: close");
  www.println();

  while(www.available()){
    char c = www.read();
  }

  www = cc3000.connectTCP(ip, 80);
      
  genie.WriteStr(wifiConsol, F("sending whole file..."));

  //send user name to AWS file
//  getString = "GET /incomingFile/user/" + firstName +"%20" +middleName +"%20" + lastName;
//  getString += " HTTP/1.1";
//  www.println(getString);
//  www.println("Host: sensimetrics.herokuapp.com");
//  www.println("Connection: keep-alive");
//  www.println();
//
//  while(www.available()){
//    char c = www.read();
//  }

//  genie.WriteStr(wifiConsol, F("sent user name"));
  
  getString = "GET /incomingFile/expID/" + expID;
  getString += " HTTP/1.1";
  www.println(getString);
  www.println("Host: sensimetrics.herokuapp.com");
  www.println("Connection: keep-alive");
  www.println();

  while(www.available()){
    char c = www.read();
  }
  
  File readFile = SD.open(filename);

  int count = 0;
  String POST_BODY = "fileContent=";
  bool lastSent = true;
  while(readFile.available()){ 

    if(lastSent){
      POST_BODY = "fileContent=";
      
      for(int i = 0; i < 30; i++){
        if(readFile.available()){
          char c = readFile.read();
          POST_BODY += c;
        }
      }
    }
    
    genie.WriteStr(wifiConsol, String(count));
    if (www.connected()) {
      www.fastrprintln(F("POST /dataUploadFromArduino HTTP/1.1"));
      www.fastrprintln(F("Host: sensimetrics.herokuapp.com"));
      www.fastrprintln(F("Content-Type: application/x-www-form-urlencoded"));
      www.fastrprint(F("Content-length: "));
//      char stringBuffer[8];
//      sprintf(stringBuffer, "%d", POST_BODY.length());
//      www.fastrprint(stringBuffer);
      www.println(POST_BODY.length());
      www.println();
      www.println(POST_BODY); 
      lastSent = true;   
    }else{
      www = cc3000.connectTCP(ip, 80);
      if (www.connected()) {
        genie.WriteStr(wifiConsol, F("Successfully re-connected"));
        delay(1000);
        www.println();
      } else {
        genie.WriteStr(wifiConsol, F("Connection failed"));   
        delay(1000); 
        return;
      }
      lastSent = false;
    }

    while(www.available()){
      char c = www.read();
    } 
    count++;
  }
  readFile.close();


  genie.WriteStr(wifiConsol, F("sent post"));

  www = cc3000.connectTCP(ip, 80);
  
  getString = "GET /incomingFile/DONE/end_file";
  getString += " HTTP/1.1";
  www.println(getString);
  www.println("Host: sensimetrics.herokuapp.com");
  www.println("Connection: close");
  www.println();


  String res = "";
  while (www.connected())
  {
    genie.WriteStr(wifiConsol, res);
    if ( www.available() )
    {
      char c = www.read();
      res += c;
    }
  }
  cc3000.disconnect(); 
}

void matchResistances(){
  int startTime = millis();
  
  for (int a = 0; a++; a < 80)
  {
    autogainres[a] = 256;
  }

  int activeCount = 0;
  int activePercent = 0;
  String calibrationDisplay = "";
    
  for ( rowncoln = 0; rowncoln < sensorCount; rowncoln++)
  {

    if(sensors[rowncoln] != EMPTY){
      
      activeCount++;
      activePercent = activeCount*100/numActiveSensors;
      calibrationDisplay = "Res Matching is: \n" + String(activePercent) + "% Complete";
      genie.WriteStr(4, calibrationDisplay);
      
      
      row = (int)(rowncoln / 8);
      col = rowncoln - 8 * (int)(rowncoln / 8); //rowncoln % 8;
      
      int muxRow = rowToMux[row];
      int muxCol = colarray[col];
  
      MULTIPLIER2_on(muxRow);
      MULTIPLIER1_on(muxCol); ////////////////SHOULD BE CHECKED
  
      // for the current sensor initialize faulty to be false for every resistor
      for (int a = 0; a < 16; a++)
      {
        faulty[a] = false;
      }
  
      // compare current sensor to 16 resistors
      wrangesmallest = 15;
      for (res = 15; res >= 0; res--)
      {
        AUTOGAINMUX_on(res);//(*(resarray+res));
        for (ab = 0; ab < 5; ab++);
  
        for (int a = 0; a < 250; a++) //buffer
        {
          wint = SPI_ADC_RECEIVE();   
        }
  
        for (int a = 0; a < 150; a++)
        {
          wint = SPI_ADC_RECEIVE();
          
           if(wint >= 524288 )
            {
              wint = wint - 1048576;
            }       
  
          if (a == 0) //after the first reading set that reading to both min and max
          {
            wmax = wint;
            wmin = wint;
          }
          else
          {
            if ((wmax < wint))
            {
             wmax = wint;
            }
            if ((wmin > wint))
            {
              wmin = wint;
            }
            if ( wint > 201860 || wint < -201860 )
            {
              faulty[res] = true;
            }
  
          }
  
  
        }//end comparison of single sensor to one resistor
  
        wrange[res] = wmax - wmin;
        if (wrange[res] < wrange[wrangesmallest])
        {
          wrangesmallest =  res;
        }
      }//autogain for end
//      autogainres[row * 8 + col] = wrangesmallest;
      autogainres[rowncoln] = wrangesmallest;
      
      faultysensor = true;
      for(int i = 0; i < 16; i++){
        if(faulty[i] == false){
          faultysensor = false;
        }
      }

//    labeling sensors as faulty
      if (faultysensor == true)
      {
        autogainres[rowncoln] = 0; //4;
      }else if (autogainres[rowncoln] != 15)
      {
        autogainres[rowncoln] = autogainres[rowncoln] + 1; //4;
      }
//
//      if (autogainres[rowncoln] != 15)
//      {
//        autogainres[rowncoln] = autogainres[rowncoln] + 1; //4;
//  
//      }
  
    }//end if !=EMPTY
    else{
      autogainres[rowncoln] = 255;
    }
    
   }//row end column end
  autogain = true;

  for (int a = 0; a < sensorCount; a++) //6
  {
    //  for (ab = 0; ab < 10; ab++);

    w = (unsigned long int)autogainres[a];

    ToSendDataBuffer1[2 * a] = w;
    ToSendDataBuffer1[2 * a + 1] = w >> 8;
  }

  dataFile.println("Reference resistors:  ");  
  int rowEntry = 0;
  String rowString = "";
  for(int i = 0; i < sensorCount; i++){
    if(rowEntry < 8){
      rowString += autogainres[i];
      rowString += ",";
      rowEntry++;
    }else{
      dataFile.println(rowString);
      rowString = autogainres[i];
      rowString += ",";
      rowEntry = 1;
    } 
  }
//  for(int i = 0; i < 160; i++){
//    if(rowEntry < 16){
//      if(i%2 == 0){
//        rowString += ToSendDataBuffer1[i];
//        rowString += ",";
//      }
//      rowEntry++;
//    }else{
//      dataFile.println(rowString);
//      rowString = ToSendDataBuffer1[i];
//      rowString += ",";
//      rowEntry = 1;
//    } 
//  }
  dataFile.println(rowString);//print last row of res matches

  for (int a = 0; a < 80; a++) //6
  {
    AMP1[a] = ( 2490 / resistorarray[ autogainres[a] ] );
  }

  flag = 1;
}



